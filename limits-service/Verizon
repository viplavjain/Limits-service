(i) /***EmployeeController**/
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.*;

import java.util.List;

@RestController
public class EmployeeController {

    @Autowired
    private EmployeeService employeeService;

    @GetMapping("/employees")
    public List<Employee> fetchAllEmployees(@RequestParam("system") String system) {
        DataSourceContextHolder.setSystemKey(system);  // Set the system key to decide which DB to use
        List<Employee> employees = employeeService.fetchAllEmployees();
        DataSourceContextHolder.clear();  // Clear the context to prevent leakage
        return employees;
    }

    @PostMapping("/employees")
    public Employee saveEmployee(@RequestParam("system") String system, @RequestBody Employee employee) {
        DataSourceContextHolder.setSystemKey(system);
        Employee savedEmployee = employeeService.saveEmployee(employee);
        DataSourceContextHolder.clear();
        return savedEmployee;
    }

    @DeleteMapping("/employees/{id}")
    public String deleteEmployee(@RequestParam("system") String system, @PathVariable Long id) {
        DataSourceContextHolder.setSystemKey(system);
        employeeService.deleteEmployee(id);
        DataSourceContextHolder.clear();
        return "Employee deleted successfully.";
    }
}
(ii) /***EmployeeService***/
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import java.util.List;

@Service
public class EmployeeService {

    @Autowired
    private OracleEmployeeRepository oracleEmployeeRepository;

    @Autowired
    private CassandraEmployeeRepository cassandraEmployeeRepository;

    public GenericRepository<Employee, Long> getRepository() {
        if (DataSourceContextHolder.isCassandraSystem()) {
            return cassandraEmployeeRepository;
        } else {
            return oracleEmployeeRepository;
        }
    }

    public List<Employee> fetchAllEmployees() {
        return getRepository().findAll();
    }

    public Employee saveEmployee(Employee employee) {
        return getRepository().save(employee);
    }

    public void deleteEmployee(Long id) {
        getRepository().deleteById(id);
    }
}

(iii) /**DataSourceContextHolder**/
public class DataSourceContextHolder {

    private static final ThreadLocal<String> CONTEXT = new ThreadLocal<>();

    public static void setSystemKey(String key) {
        CONTEXT.set(key);
    }

    public static String getSystemKey() {
        return CONTEXT.get();
    }

    public static void clear() {
        CONTEXT.remove();
    }

    public static boolean isCassandraSystem() {
        String key = CONTEXT.get();
        return "system3".equals(key);  // Return true if it's the Cassandra system
    }
}

(iv) /*** RoutingDataSource***/
import org.springframework.jdbc.datasource.lookup.AbstractRoutingDataSource;

public class RoutingDataSource extends AbstractRoutingDataSource {

    @Override
    protected Object determineCurrentLookupKey() {
        return DataSourceContextHolder.getSystemKey();
    }
}

(v) /**DataSourceConfig***/
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.boot.jdbc.DataSourceBuilder;
import org.springframework.jdbc.datasource.lookup.AbstractRoutingDataSource;
import org.springframework.data.cassandra.config.CqlSessionFactoryBean;
import com.datastax.oss.driver.api.core.CqlSession;
import javax.sql.DataSource;
import java.util.HashMap;
import java.util.Map;

@Configuration
public class DataSourceConfig {

    @Bean
    public DataSource system1OracleDataSource() {
        return DataSourceBuilder.create()
                .url("jdbc:oracle:thin:@localhost:1521:db1")
                .username("system1user")
                .password("password1")
                .driverClassName("oracle.jdbc.OracleDriver")
                .build();
    }

    @Bean
    public DataSource system2OracleDataSource() {
        return DataSourceBuilder.create()
                .url("jdbc:oracle:thin:@localhost:1521:db2")
                .username("system2user")
                .password("password2")
                .driverClassName("oracle.jdbc.OracleDriver")
                .build();
    }

    // Cassandra Session for System 3
    @Bean
    public CqlSessionFactoryBean cassandraSession() {
        CqlSessionFactoryBean cassandraSession = new CqlSessionFactoryBean();
        cassandraSession.setContactPoints("127.0.0.1");  // Replace with actual Cassandra contact point
        cassandraSession.setKeyspaceName("system3keyspace");
        cassandraSession.setPort(9042);
        return cassandraSession;
    }

@Configuration
public class DatabaseConfig {

    @Value("${spring.datasource.system1.url}")
    private String system1Url;

    @Value("${spring.datasource.system1.username}")
    private String system1Username;

    @Value("${spring.datasource.system1.password}")
    private String system1Password;

    @Value("${spring.datasource.system1.driver-class-name}")
    private String system1DriverClassName;

    // ... similar properties for system2

    @Bean
    public DataSource system1OracleDataSource() {
        return DataSourceBuilder.create()
                .url(system1Url)
                .username(system1Username)
                .password(system1Password)
                .driverClassName(system1DriverClassName)
                .build();
    }

    // ... similar method for system2
}

    // Oracle Routing Data Source
    @Bean
    public DataSource routingOracleDataSource(DataSource system1OracleDataSource, DataSource system2OracleDataSource) {
        RoutingDataSource routingDataSource = new RoutingDataSource();
        Map<Object, Object> dataSourceMap = new HashMap<>();
        
        dataSourceMap.put("system1", system1OracleDataSource);
        dataSourceMap.put("system2", system2OracleDataSource);
        
        routingDataSource.setTargetDataSources(dataSourceMap);
        return routingDataSource;
    }
}

(vi) RoutingCassandraTemplate

import org.springframework.data.cassandra.core.CassandraTemplate;
import org.springframework.data.cassandra.core.CqlTemplate;
import com.datastax.oss.driver.api.core.CqlSession;

public class RoutingCassandraTemplate extends CassandraTemplate {

    public RoutingCassandraTemplate(CqlSession session) {
        super(session);
    }

    // You can add additional logic here if needed for Cassandra-specific routing.
}

import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.stereotype.Repository;

@Repository
public interface OracleEmployeeRepository extends JpaRepository<Employee, Long>, GenericRepository<Employee, Long> {
    // JpaRepository provides findAll, save, deleteById, so no additional methods needed
}

import org.springframework.data.cassandra.repository.CassandraRepository;
import org.springframework.stereotype.Repository;

@Repository
public interface CassandraEmployeeRepository extends CassandraRepository<Employee, Long>, GenericRepository<Employee, Long> {
    // CassandraRepository provides findAll, save, deleteById, so no additional methods needed
}

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import java.util.List;

@Service
public class EmployeeService {

    @Autowired
    private OracleEmployeeRepository oracleEmployeeRepository;

    @Autowired
    private CassandraEmployeeRepository cassandraEmployeeRepository;

    public GenericRepository<Employee, Long> getRepository() {
        if (DataSourceContextHolder.isCassandraSystem()) {
            return cassandraEmployeeRepository;
        } else {
            return oracleEmployeeRepository;
        }
    }

    public List<Employee> fetchAllEmployees() {
        return getRepository().findAll();
    }

    public Employee saveEmployee(Employee employee) {
        return getRepository().save(employee);
    }

    public void deleteEmployee(Long id) {
        getRepository().deleteById(id);
    }
}

(viii) Employee
import javax.persistence.Entity;
import javax.persistence.Id;
import javax.persistence.Table;
import org.springframework.data.cassandra.core.mapping.PrimaryKey;
import org.springframework.data.cassandra.core.mapping.Table as CassandraTable;

@Entity  // For JPA (Oracle)
@Table(name = "EMPLOYEE")  // Oracle table name
@CassandraTable("employee")  // Cassandra table name
public class Employee {

    @Id  // JPA (Oracle)
    @PrimaryKey  // Cassandra
    private Long id;

    private String name;

    private double salary;

    // Getters and Setters
    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public double getSalary() {
        return salary;
    }

    public void setSalary(double salary) {
        this.salary = salary;
    }
}

(ix) GenericRepository
import java.util.List;

public interface GenericRepository<T, ID> {
    List<T> findAll();
    T save(T entity);
    void deleteById(ID id);
}

(i) JpaRepository request :- When your application uses a JpaRepository, the JpaRepository delegates
this operation to EntityManger, which interacts with the underlying DataSource for DB operations.

(ii) EntityManager and DataSource : The EntityManager is configured to use a DataSource. Normally, this is a single 
     DataSource, but when you need dynamic database routing, you set up an AbstractRoutingDataSource as the datasource
in your configuration.

(iii) AbstractRoutingDataSource :- its a special implementation of javax.sql.DataSource.that routes to different da
ta sources based on some contextual information.

AbstractRoutingDataSource.determineTargetSource() is called.
determineCurrentLookupKey() is invoked to fetch the key(usual usually stored in a ThreadLocal like DataSourceContextHolder).


Based pon the key, the corresponding DataSource is retreived from a map of data sources.
The EntityManager uses this resolved DataSource to execute the query.









