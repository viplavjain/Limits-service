package com.vzw.tools.persistence.service;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.vzw.tools.persistence.configuration.FederatedDBConfiguration;
import com.vzw.tools.source.dao.DeviceDPIDAO;
import com.vzw.tools.common.exception.ErrorMessages;
import com.vzw.tools.common.exception.XmlConversionException;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.jdbc.core.BeanPropertyRowMapper;
import org.springframework.jdbc.core.namedparam.MapSqlParameterSource;
import org.springframework.jdbc.core.namedparam.SqlParameterSource;
import org.springframework.jdbc.core.simple.SimpleJdbcCall;
import org.springframework.stereotype.Component;
import org.springframework.util.LinkedCaseInsensitiveMap;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

import java.math.BigDecimal;
import java.util.*;

import static com.vzw.tools.common.constant.CommonConstants.*;

@Component
@Slf4j
public class FedCatalogGetDataService {

    private final FederatedDBConfiguration fedCatalogConfiguration;

    @Autowired
    public FedCatalogGetDataService(FederatedDBConfiguration fedCatalogConfiguration) {
        this.fedCatalogConfiguration = fedCatalogConfiguration;
    }


    public Mono<HashMap<String,String>> fedCatalogDeviceDetails(String sorId, String productType, String env) throws XmlConversionException {

        SimpleJdbcCall simpleJdbcCall = new SimpleJdbcCall(fedCatalogConfiguration.jdbcTemplateForEnv(env))
                .withSchemaName(EPCREP_SCHEMA)
                .withProcedureName(retreiveStoredProcedure(productType))
                .returningResultSet(DEVICE_INFO, new BeanPropertyRowMapper<>(HashMap.class));
        SqlParameterSource inParams = new MapSqlParameterSource()
                .addValue(P_SOR_ID, sorId);

        Map<String,Object> result = simpleJdbcCall.execute(inParams);

       ArrayList<LinkedCaseInsensitiveMap<Object>> al=  (ArrayList<LinkedCaseInsensitiveMap<Object>>)result.get("P_RESULT_SET");
       HashMap<String,String> fedCatalogMap = new HashMap<>();
       if(al != null){
           LinkedCaseInsensitiveMap<Object> caseInsensitiveMap = al.get(0);
           for(Map.Entry<String,Object> entry : caseInsensitiveMap.entrySet() ){
               fedCatalogMap.put(entry.getKey(),entry.getValue()!=null ? entry.getValue().toString():null);
           }
           return Mono.just(fedCatalogMap);
       }
       else {
           return Mono.just(fedCatalogMap);
       }
    }

    public String retreiveStoredProcedure(String productType){
        if(productType.equalsIgnoreCase(PROD_TYPE_DEVICE))
            return FEDCATALOG_SP_DEVICE;
        else if(productType.equalsIgnoreCase(PROD_TYPE_ACCESSORY))
            return FEDCATALOG_SP_ACCESSORY;
        else {
            return " ";
        }
    }

}
