package com.vzw.tools.source.service;

import com.vzw.tools.common.exception.DataBaseException;
import com.vzw.tools.helpers.jdbc.DeviceDpiJdbcReactiveHelper;
import com.vzw.tools.source.dao.DeviceDPIDAO;
import com.vzw.tools.source.repository.DPIRepository;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.*;
import org.springframework.jdbc.core.JdbcTemplate;
import reactor.core.publisher.Mono;
import reactor.test.StepVerifier;

import java.math.BigDecimal;
import java.util.HashMap;
import java.util.Map;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

class DPIServiceTest {

    @Mock
    private DPIRepository dpiRepository;

    @Mock
    private JdbcTemplate jdbcTemplate;

    @Mock
    private DeviceDpiJdbcReactiveHelper deviceDpiJdbcReactiveHelper;

    @InjectMocks
    private DPIService dpiService;

    @BeforeEach
    void setUp() {
        MockitoAnnotations.openMocks(this);
        dpiService = new DPIService(jdbcTemplate, dpiRepository);
        dpiService.deviceDpiJdbcReactiveHelper = deviceDpiJdbcReactiveHelper;
    }

    @Test
    void testGetDeviceDPI() throws DataBaseException {
        Map<String, Object> mockResult = new HashMap<>();
        mockResult.put("sku", "12345");

        when(dpiRepository.fetchDeviceDPI("sor123")).thenReturn(mockResult);

        Map<String, Object> result = dpiService.getDeviceDPI("sor123");

        assertEquals("12345", result.get("sku"));
        verify(dpiRepository).fetchDeviceDPI("sor123");
    }

    @Test
    void testGetDPIDeviceDetails() {
        String sorId = "sor123";
        String productType = "device";
        String env = "qa1";

        DeviceDPIDAO mockDao = new DeviceDPIDAO();
        mockDao.setSku("sku123");

        when(deviceDpiJdbcReactiveHelper.retrieveDPIResponse(sorId)).thenReturn(Mono.just(mockDao));

        Mono<DeviceDPIDAO> result = dpiService.getDPIDeviceDetails(sorId, productType, env);

        StepVerifier.create(result)
                .expectNextMatches(dao -> dao.getSku().equals("sku123"))
                .verifyComplete();

        verify(deviceDpiJdbcReactiveHelper).retrieveDPIResponse(sorId);
    }

    @Test
    void testMapDeviceDPIResult() {
        Map<String, Object> data = new HashMap<>();
        data.put("sku", "skuVal");
        data.put("skuType", "skuTypeVal");
        data.put("locationCode", "loc123");
        data.put("fullRetailPrice", new BigDecimal("499.99"));
        data.put("oneYearPrice", new BigDecimal("199.99"));
        data.put("twoYearPrice", new BigDecimal("299.99"));
        data.put("prepayPrice", new BigDecimal("399.99"));
        data.put("edgeSku", "edge123");
        data.put("edgeFullRetailPrice", new BigDecimal("459.99"));

        DeviceDPIDAO dao = dpiService.mapDeviceDPIResult(data);

        assertEquals("skuVal", dao.getSku());
        assertEquals("skuTypeVal", dao.getSkuType());
        assertEquals("loc123", dao.getLocationCode());
        assertEquals(new BigDecimal("499.99"), dao.getFullRetailPrice());
        assertEquals(new BigDecimal("199.99"), dao.getOneYearPrice());
        assertEquals(new BigDecimal("299.99"), dao.getTwoYearPrice());
        assertEquals(new BigDecimal("399.99"), dao.getPrepayPrice());
        assertEquals("edge123", dao.getEdgeSku());
        assertEquals(new BigDecimal("459.99"), dao.getEdgeFullRetailPrice());
    }
}
