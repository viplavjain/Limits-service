import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;

import java.io.File;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;

public class ConfigParser {

    public static void main(String[] args) {
        try {
            // Path to your config.json file
            File file = new File("src/main/resources/config.json");

            // Initialize Jackson ObjectMapper
            ObjectMapper objectMapper = new ObjectMapper();

            // Parse JSON into a JsonNode tree
            JsonNode rootNode = objectMapper.readTree(file);

            // Initialize the HashMap to store the results
            Map<String, String> resultMap = new HashMap<>();

            // Navigate to the 'device' array
            JsonNode devices = rootNode.path("items").path("device");

            // Iterate over the 'device' array
            for (JsonNode deviceNode : devices) {
                String genericKey = deviceNode.path("genericKey").asText();

                // Navigate to the 'details' object
                JsonNode detailsNode = deviceNode.path("details");

                // Iterate over all detail categories (source, Authorization, etc.)
                Iterator<Map.Entry<String, JsonNode>> fields = detailsNode.fields();
                while (fields.hasNext()) {
                    Map.Entry<String, JsonNode> entry = fields.next();
                    JsonNode systemsArray = entry.getValue();

                    // Iterate over the array of systems
                    for (JsonNode systemNode : systemsArray) {
                        String system = systemNode.path("system").asText();
                        String key = systemNode.path("key").asText();

                        // Only populate the map if both 'system' and 'key' are non-empty
                        if (!system.isEmpty() && !key.isEmpty()) {
                            resultMap.put(key, genericKey);
                        }
                    }
                }
            }

            // Print the resulting HashMap
            resultMap.forEach((k, v) -> System.out.println(k + " -> " + v));

        } catch (Exception e) {
            e.printStackTrace();
        }
    }
}
