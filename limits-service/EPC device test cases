import com.fasterxml.jackson.core.JsonProcessingException;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import reactor.core.publisher.Mono;
import reactor.test.StepVerifier;

import static org.mockito.ArgumentMatchers.*;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
class EPCDeviceServiceTest {
    private static final Logger log = LoggerFactory.getLogger(EPCDeviceServiceTest.class);

    @Mock
    private TokenService tokenService;

    @Mock
    private GenericWebClient genericWebClient;

    @Mock
    private EPCConfiguration epcConfiguration;

    @InjectMocks
    private EPCDeviceService epcDeviceService;

    private final String sorId = "12345";
    private final String env = "test-env";
    private final String bearerToken = "Bearer test-token";

    @BeforeEach
    void setUp() {
        log.info("Setting up test cases...");
    }

    @Test
    void getEPCDeviceDetails_Success() throws JsonProcessingException, ConverterException {
        Token mockToken = new Token();
        mockToken.setToken("test-token");
        when(tokenService.getToken(env)).thenReturn(Mono.just(mockToken));

        ProductOfferSearchRequest mockSearchRequest = new ProductOfferSearchRequest();
        when(epcDeviceService.createSearchRequest(sorId)).thenReturn(mockSearchRequest);

        DeviceEpcDto mockDeviceEpcDto = new DeviceEpcDto();
        when(genericWebClient.callPostApi(eq(bearerToken), anyString(), any(), eq(AmdocsSearchResponse.class), anyString()))
                .thenReturn(Mono.just(new AmdocsSearchResponse()));

        StepVerifier.create(epcDeviceService.getEPCDeviceDetails(sorId, env))
                .expectNext(mockDeviceEpcDto)
                .verifyComplete();

        verify(tokenService, times(1)).getToken(env);
        verify(genericWebClient, times(1)).callPostApi(anyString(), anyString(), any(), any(), anyString());
    }

    @Test
    void getEPCDeviceDetails_TokenServiceFailure() {
        when(tokenService.getToken(env)).thenReturn(Mono.error(new RuntimeException("Token service failed")));

        StepVerifier.create(epcDeviceService.getEPCDeviceDetails(sorId, env))
                .expectError(CustomEPCException.class)
                .verify();

        verify(tokenService, times(1)).getToken(env);
    }

    @Test
    void getEPCDeviceDetails_FetchProductOfferingFailure() throws JsonProcessingException, ConverterException {
        Token mockToken = new Token();
        mockToken.setToken("test-token");
        when(tokenService.getToken(env)).thenReturn(Mono.just(mockToken));

        ProductOfferSearchRequest mockSearchRequest = new ProductOfferSearchRequest();
        when(epcDeviceService.createSearchRequest(sorId)).thenReturn(mockSearchRequest);

        when(genericWebClient.callPostApi(anyString(), anyString(), any(), any(), anyString()))
                .thenReturn(Mono.error(new RuntimeException("API call failed")));

        StepVerifier.create(epcDeviceService.getEPCDeviceDetails(sorId, env))
                .expectNext(new DeviceEpcDto())
                .verifyComplete();

        verify(tokenService, times(1)).getToken(env);
        verify(genericWebClient, times(1)).callPostApi(anyString(), anyString(), any(), any(), anyString());
    }

    @Test
    void createSearchRequest_Failure() throws JsonProcessingException, ConverterException {
        when(epcDeviceService.createSearchRequest(sorId))
                .thenThrow(new CustomEPCException("Failed to create search request"));

        StepVerifier.create(Mono.fromCallable(() -> epcDeviceService.createSearchRequest(sorId)))
                .expectError(CustomEPCException.class)
                .verify();
    }

    @Test
    void fetchProductSpecification_Failure() {
        when(genericWebClient.callPostApi(anyString(), anyString(), any(), eq(ProductOfferingResponse.class), anyString()))
                .thenReturn(Mono.error(new RuntimeException("Product Spec API failed")));

        StepVerifier.create(epcDeviceService.fetchProductSpecification(bearerToken, env, "docID"))
                .expectNext(new DeviceEpcDto())
                .verifyComplete();
    }

    @Test
    void fetchPriceRecords_Failure() {
        when(genericWebClient.callPostApi(anyString(), anyString(), any(), eq(ProductOfferingPriceResponse.class), anyString()))
                .thenReturn(Mono.error(new RuntimeException("Price API failed")));

        StepVerifier.create(epcDeviceService.fetchPriceRecords(new ProductOfferingResponse(), bearerToken, env))
                .expectNext(new ProductOfferingPriceResponse())
                .verifyComplete();
    }

    @Test
    void fetchProductDetails_Failure() {
        when(genericWebClient.callPostApi(anyString(), anyString(), any(), eq(ProductOfferingResponse.class), anyString()))
                .thenReturn(Mono.error(new RuntimeException("Product Details API failed")));

        StepVerifier.create(epcDeviceService.fetchProductDetails(bearerToken, env, new ProductOfferingResponse(), Mono.just(new ProductOfferingPriceResponse()), "specID"))
                .expectNext(new DeviceEpcDto())
                .verifyComplete();
    }

    @Test
    void fetchBundledProductDetails_Failure() {
        when(genericWebClient.callPostApi(anyString(), anyString(), any(), eq(ProductOfferingResponse.class), anyString()))
                .thenReturn(Mono.error(new RuntimeException("Bundled Product API failed")));

        StepVerifier.create(epcDeviceService.fetchBundledProductDetails(bearerToken, env, new ProductOfferingResponse(), Mono.just(new ProductOfferingPriceResponse()), new ProductOfferingResponse()))
                .expectNext(new DeviceEpcDto())
                .verifyComplete();
    }

    @Test
    void fetchProductOfferingGroup_Failure() {
        when(genericWebClient.callPostApi(anyString(), anyString(), any(), eq(ProductOfferingResponse.class), anyString()))
                .thenReturn(Mono.error(new RuntimeException("POG API failed")));

        StepVerifier.create(epcDeviceService.fetchProductOfferingGroup(bearerToken, new ProductOfferingResponse(), env))
                .expectNext(new ProductOfferingResponse())
                .verifyComplete();
    }
}
