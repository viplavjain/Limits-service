import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.mockito.junit.jupiter.MockitoExtension;
import reactor.core.publisher.Mono;
import reactor.test.StepVerifier;

import static org.mockito.ArgumentMatchers.*;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
public class EPCDeviceServiceTest {

    @InjectMocks
    private EPCDeviceService epcDeviceService;

    @Mock
    private TokenService tokenService;

    @Mock
    private GenericWebClient genericWebClient;

    @Mock
    private EPCConfiguration epcConfiguration;

    private final String sorId = "testSorId";
    private final String env = "testEnv";
    private final String bearerToken = "Bearer testToken";

    @BeforeEach
    void setUp() {
        when(tokenService.getToken(anyString())).thenReturn(Mono.just(new Token("testToken")));
    }

    @Test
    void testGetEPCDeviceDetails_Success() {
        ProductOfferSearchRequest request = new ProductOfferSearchRequest();
        DeviceEpcDto expectedDto = new DeviceEpcDto();

        when(genericWebClient.callPostApi(any(), any(), any(), eq(AmdocsSearchResponse.class), any()))
                .thenReturn(Mono.just(new AmdocsSearchResponse()));

        Mono<DeviceEpcDto> result = epcDeviceService.getEPCDeviceDetails(sorId, env);

        StepVerifier.create(result)
                .expectNext(expectedDto)
                .verifyComplete();
    }

    @Test
    void testGetEPCDeviceDetails_TokenServiceFailure() {
        when(tokenService.getToken(anyString())).thenReturn(Mono.error(new RuntimeException("Token error")));

        Mono<DeviceEpcDto> result = epcDeviceService.getEPCDeviceDetails(sorId, env);

        StepVerifier.create(result)
                .expectErrorMatches(throwable -> throwable instanceof CustomEPCException && throwable.getMessage().contains("Unexpected error in generating token"))
                .verify();
    }

    @Test
    void testCreateSearchRequest_ExceptionHandling() {
        assertThrows(CustomEPCException.class, () -> epcDeviceService.createSearchRequest(null));
    }

/*ERROR com.vzw.tools.authoring.service.EPCService -- Error occurred while calling Product Offer Search api:
java.lang.NullPointerException: Cannot invoke "java.util.List.get(int)" because the return value of "com.vzw.tools.authoring.entity.AmdocsSearchResponse.getDocuments()" is null
	at com.vzw.tools.authoring.service.EPCService.lambda$fetchProductOffering$3(EPCService.java:118)
	at reactor.core.publisher.FluxFlatMap.trySubscribeScalarMap(FluxFlatMap.java:153)
	at reactor.core.publisher.MonoFlatMap.subscribeOrReturn(MonoFlatMap.java:53)
	at reactor.core.publisher.Mono.subscribe(Mono.java:4560)
	at reactor.test.DefaultStepVerifierBuilder$DefaultStepVerifier.toVerifierAndSubscribe(DefaultStepVerifierBuilder.java:891)
	at reactor.test.DefaultStepVerifierBuilder$DefaultStepVerifier.verify(DefaultStepVerifierBuilder.java:831)
	at reactor.test.DefaultStepVerifierBuilder$DefaultStepVerifier.verify(DefaultStepVerifierBuilder.java:823)
	at reactor.test.DefaultStepVerifierBuilder.verifyComplete(DefaultStepVerifierBuilder.java:690)
	at com.vzw.tools.authoring.service.EPCServiceTest.testFetchProductOffering_ExceptionHandling(EPCServiceTest.java:192)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at org.junit.platform.commons.util.ReflectionUtils.invokeMethod(ReflectionUtils.java:728)
	at org.junit.jupiter.engine.execution.MethodInvocation.proceed(MethodInvocation.java:60)
	at org.junit.jupiter.engine.execution.InvocationInterceptorChain$ValidatingInvocation.proceed(InvocationInterceptorChain.java:131)
	at org.junit.jupiter.engine.extension.TimeoutExtension.intercept(TimeoutExtension.java:156)
	at org.junit.jupiter.engine.extension.TimeoutExtension.interceptTestableMethod(TimeoutExtension.java:147)
	at org.junit.jupiter.engine.extension.TimeoutExtension.interceptTestMethod(TimeoutExtension.java:86)
	at org.junit.jupiter.engine.execution.InterceptingExecutableInvoker$ReflectiveInterceptorCall.lambda$ofVoidMethod$0(InterceptingExecutableInvoker.java:103)
	at org.junit.jupiter.engine.execution.InterceptingExecutableInvoker.lambda$invoke$0(InterceptingExecutableInvoker.java:93)
	at org.junit.jupiter.engine.execution.InvocationInterceptorChain$InterceptedInvocation.proceed(InvocationInterceptorChain.java:106)
	at org.junit.jupiter.engine.execution.InvocationInterceptorChain.proceed(InvocationInterceptorChain.java:64)
	at org.junit.jupiter.engine.execution.InvocationInterceptorChain.chainAndInvoke(InvocationInterceptorChain.java:45)
	at org.junit.jupiter.engine.execution.InvocationInterceptorChain.invoke(InvocationInterceptorChain.java:37)
	at org.junit.jupiter.engine.execution.InterceptingExecutableInvoker.invoke(InterceptingExecutableInvoker.java:92)
	at org.junit.jupiter.engine.execution.InterceptingExecutableInvoker.invoke(InterceptingExecutableInvoker.java:86)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.lambda$invokeTestMethod$7(TestMethodTestDescriptor.java:218)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.invokeTestMethod(TestMethodTestDescriptor.java:214)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.execute(TestMethodTestDescriptor.java:139)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.execute(TestMethodTestDescriptor.java:69)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:151)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141)
	at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:41)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:155)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141)
	at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:41)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:155)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141)
	at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.submit(SameThreadHierarchicalTestExecutorService.java:35)
	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.execute(HierarchicalTestExecutor.java:57)
	at org.junit.platform.engine.support.hierarchical.HierarchicalTestEngine.execute(HierarchicalTestEngine.java:54)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:198)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:169)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:93)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.lambda$execute$0(EngineExecutionOrchestrator.java:58)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.withInterceptedStreams(EngineExecutionOrchestrator.java:141)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:57)
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:103)
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:85)
	at org.junit.platform.launcher.core.DelegatingLauncher.execute(DelegatingLauncher.java:47)
	at org.junit.platform.launcher.core.SessionPerRequestLauncher.execute(SessionPerRequestLauncher.java:63)
	at com.intellij.junit5.JUnit5IdeaTestRunner.startRunnerWithArgs(JUnit5IdeaTestRunner.java:57)
	at com.intellij.rt.junit.IdeaTestRunner$Repeater$1.execute(IdeaTestRunner.java:38)
	at com.intellij.rt.execution.junit.TestsRepeater.repeat(TestsRepeater.java:11)
	at com.intellij.rt.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:35)
	at com.intellij.rt.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:232)
	at com.intellij.rt.junit.JUnitStarter.main(JUnitStarter.java:55)

java.lang.AssertionError: expectation "expectNext(DeviceEpcDto(displayInSiteSearch=null, visaCardDPPTerm=null, comingSoonFlag=null, showcaseFlag=null, itemSaleflag=null, creationDate=null, doNotDisplayIfOutOfStock=null, myBusinessUnique=null, enablePreConfigureCart=null, skipECPDDiscount=null, devicePaymentConfigSetup=null, preferredTerm=null, earlyTerminationText=null, manualDiscountAllowed=null, defaultDisplayFlag=null, greatPlainsPrice=null, supportOnlyFlag=null, activeFlag=null, imEquipId=null, upcCode=null, upcCodeFull=null, carrier=null, postpaidRestrictDate=null, prepayRestrictDate=null, billToAccountEligibleFlag=null, edgeDeviceCap=null, edgeDpc=null, edgeDpcGroup=null, edgeEligibilityInd=null, imImageUrl=null, instantCredit=null, itemCost=null, sorPIBIndicator=null, prodCode1=null, prodCode2=null, prodCode3=null, prodCode4=null, prodCode5=null, prodName=null, prop65=null, sorProductFamily=null, sorSkuType=null, h1Tag=null, pairedImeiSku=null, documentName=null, manufacturer=null, preferredSim=null, preferredSoftSim=null, alternateSim=null, restrictToFamilyInd=null, simClass4G=null, smsCapableFlag=null, wifiCallingInd=null, cdmaCapable=null, gsmCapable=null, eligibleNumShareOS=null, euiccCapable=null, numberShareCapable=null, vendorKey=null, v4b=null, e911AddrInd=null, virtualSimSku=null, esimOnly=null, sorFamilyName=null, operatingSystem=null, productUniversalAccessories=null, universalFlag=null, seoUrlName=null, h1=null, sorDisplayName=null, sorDeviceType=null, sorDeviceCategory=null, coverageCheck4G=null, backupAssistCapableFlag=null, buddyUpgrdEligInd=null, dacc=null, deviceCapabilityInd=null, dsdsCapable=null, deviceFamilyType=null, hdVoiceInd=null, sorIMDeviceCategory=null, nfcCapableFlag=null, globalReadyFlag=null, FRP=null, CP12=null, CP24=null, PP=null, EFRP=null, SOR=null))" failed (expected value: DeviceEpcDto(displayInSiteSearch=null, visaCardDPPTerm=null, comingSoonFlag=null, showcaseFlag=null, itemSaleflag=null, creationDate=null, doNotDisplayIfOutOfStock=null, myBusinessUnique=null, enablePreConfigureCart=null, skipECPDDiscount=null, devicePaymentConfigSetup=null, preferredTerm=null, earlyTerminationText=null, manualDiscountAllowed=null, defaultDisplayFlag=null, greatPlainsPrice=null, supportOnlyFlag=null, activeFlag=null, imEquipId=null, upcCode=null, upcCodeFull=null, carrier=null, postpaidRestrictDate=null, prepayRestrictDate=null, billToAccountEligibleFlag=null, edgeDeviceCap=null, edgeDpc=null, edgeDpcGroup=null, edgeEligibilityInd=null, imImageUrl=null, instantCredit=null, itemCost=null, sorPIBIndicator=null, prodCode1=null, prodCode2=null, prodCode3=null, prodCode4=null, prodCode5=null, prodName=null, prop65=null, sorProductFamily=null, sorSkuType=null, h1Tag=null, pairedImeiSku=null, documentName=null, manufacturer=null, preferredSim=null, preferredSoftSim=null, alternateSim=null, restrictToFamilyInd=null, simClass4G=null, smsCapableFlag=null, wifiCallingInd=null, cdmaCapable=null, gsmCapable=null, eligibleNumShareOS=null, euiccCapable=null, numberShareCapable=null, vendorKey=null, v4b=null, e911AddrInd=null, virtualSimSku=null, esimOnly=null, sorFamilyName=null, operatingSystem=null, productUniversalAccessories=null, universalFlag=null, seoUrlName=null, h1=null, sorDisplayName=null, sorDeviceType=null, sorDeviceCategory=null, coverageCheck4G=null, backupAssistCapableFlag=null, buddyUpgrdEligInd=null, dacc=null, deviceCapabilityInd=null, dsdsCapable=null, deviceFamilyType=null, hdVoiceInd=null, sorIMDeviceCategory=null, nfcCapableFlag=null, globalReadyFlag=null, FRP=null, CP12=null, CP24=null, PP=null, EFRP=null, SOR=null); actual value: DeviceEpcDto(displayInSiteSearch=null, visaCardDPPTerm=null, comingSoonFlag=null, showcaseFlag=null, itemSaleflag=null, creationDate=null, doNotDisplayIfOutOfStock=null, myBusinessUnique=null, enablePreConfigureCart=null, skipECPDDiscount=null, devicePaymentConfigSetup=null, preferredTerm=null, earlyTerminationText=null, manualDiscountAllowed=null, defaultDisplayFlag=null, greatPlainsPrice=null, supportOnlyFlag=null, activeFlag=null, imEquipId=null, upcCode=null, upcCodeFull=null, carrier=null, postpaidRestrictDate=null, prepayRestrictDate=null, billToAccountEligibleFlag=null, edgeDeviceCap=null, edgeDpc=null, edgeDpcGroup=null, edgeEligibilityInd=null, imImageUrl=null, instantCredit=null, itemCost=null, sorPIBIndicator=null, prodCode1=null, prodCode2=null, prodCode3=null, prodCode4=null, prodCode5=null, prodName=null, prop65=null, sorProductFamily=null, sorSkuType=null, h1Tag=null, pairedImeiSku=null, documentName=null, manufacturer=null, preferredSim=null, preferredSoftSim=null, alternateSim=null, restrictToFamilyInd=null, simClass4G=null, smsCapableFlag=null, wifiCallingInd=null, cdmaCapable=null, gsmCapable=null, eligibleNumShareOS=null, euiccCapable=null, numberShareCapable=null, vendorKey=null, v4b=null, e911AddrInd=null, virtualSimSku=null, esimOnly=null, sorFamilyName=null, operatingSystem=null, productUniversalAccessories=null, universalFlag=null, seoUrlName=null, h1=null, sorDisplayName=null, sorDeviceType=null, sorDeviceCategory=null, coverageCheck4G=null, backupAssistCapableFlag=null, buddyUpgrdEligInd=null, dacc=null, deviceCapabilityInd=null, dsdsCapable=null, deviceFamilyType=null, hdVoiceInd=null, sorIMDeviceCategory=null, nfcCapableFlag=null, globalReadyFlag=null, FRP=null, CP12=null, CP24=null, PP=null, EFRP=null, SOR=null))
*/
StepVerifier.create(epcService.fetchProductOffering(request))
    .expectErrorMatches(throwable -> throwable instanceof CustomException 
        && throwable.getMessage().equals("No documents found in response"))
    .verify();

    @Test
    void testFetchProductOffering_ExceptionHandling() {
        when(genericWebClient.callPostApi(any(), any(), any(), eq(AmdocsSearchResponse.class), any()))
                .thenReturn(Mono.error(new RuntimeException("API Failure")));

        Mono<DeviceEpcDto> result = epcDeviceService.fetchProductOffering(bearerToken, env, new ProductOfferSearchRequest());

        StepVerifier.create(result)
                .expectNext(new DeviceEpcDto())
                .verifyComplete();
    }

    @Test
    void testFetchProductSpecification_ExceptionHandling() {
        when(genericWebClient.callPostApi(any(), any(), any(), eq(ProductOfferingResponse.class), any()))
                .thenReturn(Mono.error(new RuntimeException("Product Spec API Failure")));

        Mono<DeviceEpcDto> result = epcDeviceService.fetchProductSpecification(bearerToken, env, "documentID");

        StepVerifier.create(result)
                .expectNext(new DeviceEpcDto())
                .verifyComplete();
    }

    @Test
    void testFetchProductDetails_ExceptionHandling() {
        Mono<ProductOfferingPriceResponse> priceResponse = Mono.just(new ProductOfferingPriceResponse());
        when(genericWebClient.callPostApi(any(), any(), any(), eq(ProductOfferingResponse.class), any()))
                .thenReturn(Mono.error(new RuntimeException("Product Details API Failure")));

        Mono<DeviceEpcDto> result = epcDeviceService.fetchProductDetails(bearerToken, env, new ProductOfferingResponse(), priceResponse, "specId");

        StepVerifier.create(result)
                .expectNext(new DeviceEpcDto())
                .verifyComplete();
    }
}
