private static String processingpromoRefFeed(Map<String, String> map, String feedName, String assetType) throws Exception {

		try {
			if (map.get("sor_promo_end_date") != null) {
				map.put("sor_promo_end_date", getUTCToLocalDate(map.get("sor_promo_end_date")));
			}
			if (map.get("sor_promo_effec_date") != null) {
				map.put("sor_promo_effec_date", getUTCToLocalDate(map.get("sor_promo_effec_date")));
			}
			
			if(map.get("sor_promo_scrn_cde") != null) {
				map.put("sor_promo_scrn_cde", map.get("sor_promo_scrn_cde").trim());
			}
			

			SearchRequestAdapter searchRequestAdapter = new SearchRequestAdapter();
			VisionFeedTemplateProcessing visionFeedTemplateProcessing = new VisionFeedTemplateProcessing();
			ArrayList<String> sorPromoList = new ArrayList<String>();
			sorPromoList.add(map.get("sor_promo_id"));
			ArrayList<String> catalogOneIdVisionPromoRefList = (ArrayList<String>) searchRequestAdapter.getCOneID(
					sorPromoList, "genericelemententry", "visionPromoRef.sorPromoId", true,
					InputReader.getConfiguationPropertyValue("visionPromoRefSchemaId"));

			if (null != catalogOneIdVisionPromoRefList && catalogOneIdVisionPromoRefList.size() > 0) {
				
				if(map.containsKey("promo_display_name")) {
					map.remove("promo_display_name"); 
				}
				
				DomainApiAdapter domainApiAdapter = new DomainApiAdapter();
				JsonNode geeTemplate = domainApiAdapter.getGEETemplate(catalogOneIdVisionPromoRefList.get(0));
				visionFeedTemplateProcessing.createGeeFromDomainTemplate(geeTemplate, map, feedName, assetType,
						catalogOneIdVisionPromoRefList.get(0));
				generateFile(map.get("sor_promo_id"), "update", folderPath, "PROMO_VISION_FEED.txt", assetType);
				return "success";

			} else {
				visionFeedTemplateProcessing.createGeeFromExistingTemplate(map, feedName, assetType);
				generateFile(map.get("sor_promo_id"), "create", folderPath, "PROMO_VISION_FEED.txt", assetType);
				return "success";
			}
		} catch (Exception e) {
			VisionFeedLoader.generateFile(map.get("sor_promo_id"), InboundConstants.FALIURE, folderPath,"PROMO_VISION_FEED.txt", assetType);
			log.error("Method: processingpromoRefFeed :::  Exception::: {}", e.getMessage());
			//emailService.sendParserExceptionMail("During Vision Promo Ref Data Processing::"+e.toString(), e.getClass().getName());
			throw e;
		}

	}

-------------------------------------------------------------------------------------------------------
getCOneId()
public List<String> getCOneID(List<String> skuIdList,String contextType,String bccSearchOnField,boolean isLinkedAsset,String schemaId) throws Exception {
		log.debug("Inside getCOneId method...");
		ArrayList<String> catalogOneIds = new ArrayList<String>();
		SearchApiAdapter searchAdapter = new SearchApiAdapter();
		if(isLinkedAsset) {
			CombinedDocumentsSearchRequest searchAPI = new CombinedDocumentsSearchRequest();
			CombinedSearchApiAdapter combinedsearchAdapter = new CombinedSearchApiAdapter();
			searchAPI.setContext(combinedsearchAdapter.loadSearchContext(contextType,"bulk"));
			String[] nodeType = bccSearchOnField.split("\\.{1}");
			bccSearchOnField = bccSearchOnField.substring(bccSearchOnField.indexOf(".")+1, bccSearchOnField.length());
			searchAPI.setItem(combinedsearchAdapter.loadCombinedSearchItem(nodeType[0],skuIdList,contextType,bccSearchOnField,schemaId));
			searchAPI.setResponseFilter(searchAdapter.loadResponseFilter());
			//call search API from here
			ApiClient apiClient = new ApiClient();
			apiClient.addDefaultHeader("authorization", "Bearer "+ C1EntityManager.getToken());
			apiClient.addDefaultHeader("env", InputReader.getConfiguationPropertyValue("env"));
			apiClient.setBasePath(apiClientBRBaseURL+InboundConstants.SEARCH_API_URL);
			SearchApi searchAPiClient = new SearchApi(apiClient);
			try {
				log.info("Combined Search API request parameter ::::{}",skuIdList);
				log.debug("Combined Search Request::: {}", mapper.writeValueAsString(searchAPI));
				CombinedDocumentsSearchResponse searchDocuments = searchAPiClient.combinedDocumentsSearch(searchAPI);
				List<DocumentResponse> documents = searchDocuments.getDocuments();
				
				for (DocumentResponse documentResponse : documents) {
					log.info("C1 id::{}",documentResponse.getDocumentMetaData().getDocumentID());
					catalogOneIds.add(documentResponse.getDocumentMetaData().getDocumentID());
				}
			}catch (Unauthorized ex) {
				log.error("Unauthorized Error inside getCOneID::{}",ex.getMessage()+", "+SORID_Error_Message+skuIdList);
			} catch (Exception e) {
				log.error("Error inside getCOneID::{} for sor Id::{}",e,skuIdList);
				throw e;
			}
		}else {
		SearchDocumentsRequest searchAPI = new SearchDocumentsRequest();
		searchAPI.setContext(searchAdapter.loadSearchContext(contextType,"single"));
		searchAPI.setCriteria(searchAdapter.loadSearchCriteria(skuIdList,bccSearchOnField));
		searchAPI.setResponseFilter(searchAdapter.loadResponseFilter());
		ApiClient apiClient = new ApiClient();
		apiClient.addDefaultHeader("authorization", "Bearer "+C1EntityManager.getToken());
		apiClient.addDefaultHeader("env", InputReader.getConfiguationPropertyValue("env"));
		apiClient.setBasePath(apiClientBRBaseURL+InboundConstants.SEARCH_API_URL);
		SearchApi searchAPiClient = new SearchApi(apiClient);
		try {
			log.info("Single Search API request parameter ::::{}",skuIdList);
			log.debug("API Base path inside else block getCOneID ::::{}",apiClient.getBasePath());
			log.debug("Context Type inside else block getCOneID ::::{}",contextType);
			log.debug("bccSearchOnField Type inside else block getCOneID ::::{}",bccSearchOnField);
			log.info("Search Request::: {}",mapper.writeValueAsString(searchAPI));
			SearchDocumentsResponse searchDocuments = searchAPiClient.searchDocuments(searchAPI);
			List<DocumentResponse> documents = searchDocuments.getDocuments();
			for (DocumentResponse documentResponse : documents) {
				catalogOneIds.add(documentResponse.getDocumentMetaData().getDocumentID());
			}
			log.info("----catalogOneIds::{}",catalogOneIds);
		}catch (Unauthorized ex) {
			log.error("Unauthorized Error inside getCOneID::{}",ex.getMessage()+", "+SORID_Error_Message+skuIdList);
		}catch (Exception e) {
			log.error("Error inside getCOneID::{} for sor Id::{} ",e.getMessage(),skuIdList);
			throw e;
		}
		}
		return catalogOneIds;
		
	}
-------------------------------------------------------------------------------------------------------
geeTemplate()
public JsonNode getGEETemplate(String catalogOneIdGee) throws Exception{
		log.info("Inside getGEETemplate :::: catalogOneIdGee:::"+catalogOneIdGee);
		com.vzw.epc.mapper.amdocs.domainApi.generic.ApiClient apiClient = new com.vzw.epc.mapper.amdocs.domainApi.generic.ApiClient();
		
		//GenericElementResourceApi elementApi = new GenericElementResourceApi(apiClient);
		JsonNode geeJsonNode = null;
		try {
			apiClient.addDefaultHeader("authorization", "Bearer "+C1EntityManager.getToken());
			apiClient.addDefaultHeader("env", InputReader.getConfiguationPropertyValue("env"));
			apiClient.setBasePath(apiClientBRBaseURL+InboundConstants.DOMAIN_API_GENERIC_ENTITY_BASE_URL);
			GenericElementEntryResourceApi elementApi = new GenericElementEntryResourceApi(apiClient);
			GenericElementEntry genericElement = null;
			genericElement = elementApi.getGenericElementEntry(catalogOneIdGee, null, "WORKSTREAM", null);
			
			String json = mapper.writeValueAsString(genericElement);
			geeJsonNode = mapper.readTree(json);
			log.debug("Inside getGEETemplate():::{}"+jsonNode);
		}catch (Unauthorized ex) {
			log.error("Unauthorized Error inside getGEETemplate::{}",ex.getMessage()+",for Id "+catalogOneIdGee);
		}catch (Exception e1) {
			//emailNotificationService.send(apiClient.getBasePath(), e1.getMessage()+", "+ErrorMessage+catalogOneIdGee);
			log.error("Method: getGEETemplate  ::: {} {} ",apiClient.getBasePath(), e1.getMessage()+", "+ErrorMessage+catalogOneIdGee);
		}
		return geeJsonNode;
	}
--------------------------------------------------------------------------------------------------
public String createGeeFromDomainTemplate(JsonNode geeJson, Map<String, String> map, String feedName,
			String assetName, String geeC1Id) throws Exception {
		log.info("Inside Update process assetName:::::" + assetName);
		log.info("Inside Update process feedName:::::" + feedName);
		try {
			SearchRequestAdapter searchRequestAdapter = new SearchRequestAdapter();
			InboundUtility inboundUtility = new InboundUtility();
			JsonNode assetMapperNode = getGEEMapperProperties(assetName);
			JsonNode assetPropertiesNode = null;
			if("zipCodeMarket".equals(assetName) || "visionPromoRef".equals(assetName)) {
				assetPropertiesNode = assetMapperNode.path("properties_update");
			} else {
				assetPropertiesNode = assetMapperNode.path("properties");
			}
			// update all the value in template

			JsonNode templateJsonRootNode = null;
			String fileID = null;

			templateJsonRootNode = geeJson;
			fileID = geeC1Id;
			log.debug("C1ID/fileID: " + fileID);
			// ((ObjectNode) templateJsonRootNode).put("id", fileID);
			ArrayNode templateJsonFieldNodeArray = (ArrayNode) templateJsonRootNode.get("field");

			int nullindex = -1;
			for (int i = 0; i < map.size(); i++) {
				nullindex = getIndex(templateJsonFieldNodeArray, assetPropertiesNode, map);
				templateJsonFieldNodeArray.remove(nullindex);
			}
			/**
			 * Get linked asset node from catalog mapping json
			 */
			JsonNode linkedAssetNode = assetMapperNode.path("linkedAsset");
			log.debug("Linked Asset in Mapping file: {}", linkedAssetNode);
			Map<String, String> linkedAssetNodeMap = null;

			if (linkedAssetNode != null) {
				linkedAssetNodeMap = mapper.convertValue(linkedAssetNode, new TypeReference<Map<String, String>>() {
				});

				log.debug("Linked asset properties in Catalog Mapping: " + linkedAssetNodeMap);
			} else {
				log.debug("No linked asset node found in catalog mapping file for asset: " + assetName);
			}

			
			

			String nodeToIterate ="field";
			InboundUtility iu = new InboundUtility();
			iu.checkAndInsertNodesToJsonNode(map, assetName, assetPropertiesNode, templateJsonFieldNodeArray,
					nodeToIterate);
			
			
			for (Map.Entry<String, String> e : map.entrySet()) {
				// get the JSON field name from properties file data comparing the field name
				// given by informatica

				String jsonFieldName = null;

				if (templateJsonFieldNodeArray.isArray() && assetPropertiesNode.get((String) e.getKey()) != null) {
					jsonFieldName = assetPropertiesNode.get((String) e.getKey()).asText();

					// Below is JSON template Traversal

					for (JsonNode fieldNode : templateJsonFieldNodeArray) {
						if (fieldNode.path("name").asText().equals(jsonFieldName)) {
							JsonNode templateJsonEntryNodeArray = fieldNode.get("entry");
							for (JsonNode entryNode : templateJsonEntryNodeArray) {
								JsonNode templateJsonParameterNodeArray = entryNode.get("parameter");
								for (JsonNode paramNode : templateJsonParameterNodeArray) {
									JsonNode templateJsonValueNodeArray = paramNode.get("value");
									ArrayNode valueNodeArray = (ArrayNode) paramNode.get("value");
									// for (JsonNode valueNode : templateJsonValueNodeArray) {

									JsonNode valueNodeType = null;
									String jsonNodeValueType = null;
									if (paramNode.get(InboundConstants.VALUETYPE) != null) {
										jsonNodeValueType = paramNode.get(InboundConstants.VALUETYPE).asText();
									}
									if(jsonFieldName.equalsIgnoreCase("id")
											&& !paramNode.get(InboundConstants.VALUETYPE).asText().equalsIgnoreCase("string")) {
										jsonNodeValueType = "string";
									}
									for (JsonNode valueNode : templateJsonValueNodeArray) {
										valueNodeType = valueNode;
										break;
									}

									if (e.getValue() != null
											&& e.getValue().contains(InboundConstants.ARRAYCOMMASEPERATOR)) {
										String schemaId = null;
										String replacedStringWithComma = e.getValue()
												.replace(InboundConstants.ARRAYCOMMASEPERATOR, ",");
										String[] values = replacedStringWithComma.split(",");

										if (linkedAssetNode != null && linkedAssetNode.get(jsonFieldName) != null) {
											log.info("linkedAssetNode: " + linkedAssetNode.get(jsonFieldName));

											ArrayList<String> skuIdList = new ArrayList<>();
											for (String value : values) {
												skuIdList.add(value);
											}
											List<String> c1Ids = new ArrayList<String>();
											for (String value : values) {
												skuIdList.add(value);
											}
											if (jsonFieldName.equalsIgnoreCase("market")) {
												schemaId = "9b479767-cdbc-4d06-8ca2-710cd965f247";
												c1Ids = (ArrayList<String>) searchRequestAdapter.getCOneID(skuIdList,
														"genericelemententry", "generic.displayName", true, schemaId);
											}
											if (jsonFieldName.equalsIgnoreCase("cellularMarketArea")) {
												schemaId = "783e4dac-0f88-4693-9e36-af649b028086";
												c1Ids = inboundUtility.getC1ID(skuIdList, "genericelemententry",
														"generic.displayName", true, schemaId, values[0],
														jsonFieldName);
											}
											if (jsonFieldName.equalsIgnoreCase("designatedMarketArea")) {
												schemaId = "f34fedc5-42cc-4a25-ab64-2a97f7ca6b4f";
												c1Ids = inboundUtility.getC1ID(skuIdList, "genericelemententry",
														"generic.displayName", true, schemaId, values[0],
														jsonFieldName);
											}
											if (c1Ids.size() == 0) {
												String nullValue = null;
												((ObjectNode) paramNode).put(InboundConstants.VALUE, nullValue);
											} else {

												if (valueNodeType == null
														|| (valueNodeType != null && valueNodeType.isTextual())) {
													valueNodeArray.removeAll();
													for (String c1Id : c1Ids) {
														valueNodeArray.add(c1Id);
													}

												} else {
													String result = null;
													int index = 1;
													for (String c1Id : c1Ids) {
														if (index == 1) {
															result = c1Id;
														} else {
															result = result + "," + c1Id;
														}
														index++;
													}

													valueNodeArray.removeAll();
													ObjectNode value = mapper.createObjectNode().objectNode();
													value.put("locale", "en-US");
													value.put("value", result);
													valueNodeArray.add(value);

												}
											}

										} else {

											// Not linked Asset and list values
											if (valueNodeType == null
													|| (valueNodeType != null && valueNodeType.isTextual())) {
												valueNodeArray.removeAll();
												for (String value : values) {
													valueNodeArray.add(value);
												}

											} else {
												String result = null;
												int index = 1;
												for (String value : values) {
													if (index == 1) {
														result = value;
													} else {
														result = result + "," + value;
													}
													index++;
												}

												valueNodeArray.removeAll();
												ObjectNode value = mapper.createObjectNode().objectNode();
												value.put("locale", "en-US");
												value.put("value", result);
												valueNodeArray.add(value);
											}

										}

									} else if (e.getValue() != null && e.getValue().contains(InboundConstants.TILDA)) {
										String[] values = e.getValue().split(InboundConstants.TILDA);

										if (valueNodeType == null
												|| (valueNodeType != null && valueNodeType.isTextual())) {
											valueNodeArray.removeAll();
											for (String value : values) {
												valueNodeArray.add(value);
											}

										} else {
											String result = null;
											int index = 1;
											for (String value : values) {
												if (index == 1) {
													result = value;
												} else {
													result = result + "," + value;
												}
												index++;
											}

											valueNodeArray.removeAll();
											ObjectNode value = mapper.createObjectNode().objectNode();
											value.put("locale", "en-US");
											value.put("value", result);
											valueNodeArray.add(value);
										}
									} else {
										// not list value and linked asset

										if (e.getValue() != null && linkedAssetNode != null
												&& linkedAssetNode.get(jsonFieldName) != null) {
											String schemaId = null;
											ArrayList<String> skuIdList = new ArrayList<>();
											List<String> c1Ids = new ArrayList<String>();
											skuIdList.add(e.getValue());
											if (jsonFieldName.equalsIgnoreCase("market")) {
												schemaId = "9b479767-cdbc-4d06-8ca2-710cd965f247";
												c1Ids = (ArrayList<String>) searchRequestAdapter.getCOneID(skuIdList,
														"genericelemententry", "generic.displayName", true, schemaId);
											}
											if (jsonFieldName.equalsIgnoreCase("cellularMarketArea")) {
												schemaId = "783e4dac-0f88-4693-9e36-af649b028086";
												c1Ids = inboundUtility.getC1ID(skuIdList, "genericelemententry",
														"generic.displayName", true, schemaId, e.getValue(),
														jsonFieldName);
											}
											if (jsonFieldName.equalsIgnoreCase("designatedMarketArea")) {
												schemaId = "f34fedc5-42cc-4a25-ab64-2a97f7ca6b4f";
												c1Ids = inboundUtility.getC1ID(skuIdList, "genericelemententry",
														"generic.displayName", true, schemaId, e.getValue(),
														jsonFieldName);
											}
											if (c1Ids.size() == 0) {
												String nullValue = null;
												((ObjectNode) paramNode).put(InboundConstants.VALUE, nullValue);
											} else {

												if (valueNodeType == null
														|| (valueNodeType != null && valueNodeType.isTextual())) {
													valueNodeArray.removeAll();
													for (String c1Id : c1Ids) {
														valueNodeArray.add(c1Id);
													}

												} else {
													String result = null;
													int index = 1;
													for (String c1Id : c1Ids) {
														if (index == 1) {
															result = c1Id;
														} else {
															result = result + "," + c1Id;
														}
														index++;
													}

													valueNodeArray.removeAll();
													ObjectNode value = mapper.createObjectNode().objectNode();
													value.put("locale", "en-US");
													value.put("value", result);
													valueNodeArray.add(value);

												}
											}

										} else {
											// not linked asset not list values
											if (jsonNodeValueType.equalsIgnoreCase("String")
													|| jsonNodeValueType.equalsIgnoreCase("Date")) {
												// replace value object
												// conditions for multi value and boolean value to add here
												if (valueNodeType.isTextual()) {
													valueNodeArray.removeAll();
													valueNodeArray.add(e.getValue());
												} else {
													valueNodeArray.removeAll();
													ObjectNode value = mapper.createObjectNode().objectNode();
													value.put(InboundConstants.LOCALE, InboundConstants.ENGLISHUS);
													value.put(InboundConstants.VALUE, e.getValue());
													valueNodeArray.add(value);
												}
											} else {
												valueNodeArray.removeAll();
												if (jsonNodeValueType != null
														&& jsonNodeValueType.equalsIgnoreCase("Boolean")) {
													valueNodeArray.add(Boolean.parseBoolean(e.getValue()));
												} else {
													valueNodeArray.add(Integer.parseInt(e.getValue()));
												}
											}
										}
									}
								}
							}
						}
					}
				}

			} 
			String folderPath = "";
			if (feedName.contains("adminvision_promo") || feedName.equals("PROMO_VISION_FEED")
					|| feedName.equals("SPO_Category_ClassCode_VISION_FEED")
					|| feedName.equals("adminSPOVisionFeedProcessing")) {
				folderPath = InputReader.getConfiguationPropertyValue(InboundConstants.FEEDDIRECTORY) + feedName
						+ "/genericElementEntry";
			} else {
				folderPath = InputReader.getConfiguationPropertyValue(InboundConstants.FEEDDIRECTORY) + feedName
						+ "_UPDATE" + "/genericElementEntry";
			}
			Path path = Paths.get(PropertyFileUtil.getNormalizedFileName(folderPath));
			Files.createDirectories(path);
			// create JSON file
			mapper.writeValue(new File(PropertyFileUtil.getNormalizedFileName(
					folderPath + InboundConstants.SLASH + geeC1Id + InboundConstants.SUFFIXTYPE)), geeJson);
			return geeC1Id;
			
		} catch (Exception e) {
			log.error("Method: createGeeFromDomainTemplate ::: Exception: {}",e.getMessage());
//			emailService.sendParserExceptionMail("During Vision Promo Ref Data Processing::" + e.toString(),
//					e.getClass().getName());
			throw e;
		}

	}
-------------------------------------------------------------------------------------------------------
generateFile()
static void generateFile(String id, String status, String folderPath, String fileName,String assetType) {
		
		log.debug("Inside generateFile");
		folderPath = folderPath + InboundConstants.SLASH + fileName;
		//log.info("FolderPath: {}",folderPath);
		FileWriter fileWriter;
		try {
			fileWriter = new FileWriter(folderPath, true);// Set true for append mode
			PrintWriter printWriter = new PrintWriter(fileWriter);
			printWriter.print(id + "|");
			printWriter.print(status + "|");
			printWriter.print(assetType);
			printWriter.println();
			printWriter.close();

			BufferedReader br = new BufferedReader(new FileReader(folderPath));
			BufferedReader br1 = new BufferedReader(new FileReader(folderPath));
			try {
				StringBuilder sb = new StringBuilder();
				StringBuilder sb1 = new StringBuilder();
				String line = br.readLine();
				String line1 = br1.readLine();
				sb1.append(line1);
				sb1.append(System.lineSeparator());

				while (line != null) {
					sb.append(line);
					sb.append(System.lineSeparator());
					line = br.readLine();
				}
				String head = "ID|TYPE|ASSET";
				String everything = sb.toString();
				String header = sb1.toString();
				header = header.trim();
				header = header.replaceAll("\\|", "");
				if (!header.equalsIgnoreCase("IDTYPEASSET")) {
					File file = new File(folderPath);
					/*
					 * if (file.delete()) { log.info("File deleted successfully"); }
					 */
					fileWriter = new FileWriter(folderPath, false); // Set true for append mode
					printWriter = new PrintWriter(fileWriter);
					printWriter.print(head);
					printWriter.println();
					printWriter.print(everything);
					printWriter.close();
				}
			} finally {
				br.close();
			}
			log.debug("file created successfully");
		} catch (IOException e) {
			log.error("Exception while generateFile ::", e.getMessage());
		}

	}
