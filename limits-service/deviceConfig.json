{
  "items": {
    "device": [
      {
        "genericKey": "prodName",
        "details": {
          "source": [
            {
              "system": "DMD",
              "key": "prodName",
              "value": ""
            }
          ],
          "Authorization": [
            {
              "system": "EPC",
              "key": "displayName",
              "value": ""
            }
          ],
          "Persistence": [
            {
              "system": "Cassandra",
              "key": "",
              "value": ""
            }
          ],
          "Cache": [
            {
              "system": "Redis",
              "key": "",
              "value": ""
            }
          ],
          "Destination": [
            {
              "system": "Fusion",
              "key": "",
              "value": ""
            }
          ]
        }
 -----------------------------------------------------------------------------------------
 import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;

import java.io.InputStream;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;

public class JsonProcessor {
    public static void main(String[] args) {
        try {
            // Load JSON file from the resources folder
            InputStream inputStream = JsonProcessor.class.getClassLoader().getResourceAsStream("device.json");
            if (inputStream == null) {
                throw new RuntimeException("File device.json not found in resources folder");
            }

            // Parse JSON file using ObjectMapper
            ObjectMapper objectMapper = new ObjectMapper();
            JsonNode root = objectMapper.readTree(inputStream);

            // Example epcMap
            Map<String, String> epcMap = new HashMap<>();
            epcMap.put("displayName", "SomeValue");

            // Map to hold genericKeyMap
            Map<String, String> genericKeyMap = new HashMap<>();

            // Extract devices
            JsonNode devices = root.at("/items/device");
            if (devices.isArray()) {
                for (JsonNode device : devices) {
                    String genericKey = device.get("genericKey").asText();
                    JsonNode authorization = device.at("/details/Authorization");
                    if (authorization.isArray()) {
                        for (JsonNode auth : authorization) {
                            String key = auth.get("key").asText();
                            if (!key.isEmpty()) {
                                genericKeyMap.put(key, genericKey);
                            }
                        }
                    }
                }
            }

            // Update epcMap with genericKeyMap
            for (Iterator<Map.Entry<String, String>> it = epcMap.entrySet().iterator(); it.hasNext(); ) {
                Map.Entry<String, String> entry = it.next();
                String key = entry.getKey();
                if (genericKeyMap.containsKey(key)) {
                    String newKey = genericKeyMap.get(key);
                    String value = entry.getValue();
                    it.remove(); // Remove old key
                    epcMap.put(newKey, value); // Add new key-value pair
                }
            }

            // Print the updated epcMap
            System.out.println("Updated epcMap: " + epcMap);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
}
       
      }
    ]
  }
}
-------------------------------------------------------------------------------------------
import java.lang.reflect.Field;
import java.util.HashMap;
import java.util.Map;

public class DeviceDTOMapper {

    public static class DeviceDTO {
        private String deviceName;
        private int deviceId;
        private boolean isActive;

        // Getters and Setters
        public String getDeviceName() {
            return deviceName;
        }

        public void setDeviceName(String deviceName) {
            this.deviceName = deviceName;
        }

        public int getDeviceId() {
            return deviceId;
        }

        public void setDeviceId(int deviceId) {
            this.deviceId = deviceId;
        }

        public boolean isActive() {
            return isActive;
        }

        public void setActive(boolean active) {
            isActive = active;
        }

        @Override
        public String toString() {
            return "DeviceDTO{" +
                    "deviceName='" + deviceName + '\'' +
                    ", deviceId=" + deviceId +
                    ", isActive=" + isActive +
                    '}';
        }
    }

    public static DeviceDTO mapToDeviceDTO(Map<String, Object> map) throws IllegalAccessException {
        DeviceDTO deviceDTO = new DeviceDTO();
        Class<?> clazz = deviceDTO.getClass();

        for (Map.Entry<String, Object> entry : map.entrySet()) {
            String key = entry.getKey();
            Object value = entry.getValue();

            try {
                // Check if the field exists in the class
                Field field = clazz.getDeclaredField(key);

                // Make the field accessible
                field.setAccessible(true);

                // Set the value of the field
                field.set(deviceDTO, value);
            } catch (NoSuchFieldException e) {
                // Ignore fields that do not exist in the class
            }
        }

        return deviceDTO;
    }

    public static void main(String[] args) throws IllegalAccessException {
        // Example input HashMap
        Map<String, Object> inputMap = new HashMap<>();
        inputMap.put("deviceName", "Router");
        inputMap.put("deviceId", 101);
        inputMap.put("isActive", true);
        inputMap.put("unknownField", "This will be ignored");

        // Map to DeviceDTO
        DeviceDTO deviceDTO = mapToDeviceDTO(inputMap);
        System.out.println(deviceDTO);
    }
}

