package com.vzw.tools.consumer.service;


import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.vzw.tools.common.constant.CommonConstants;
import com.vzw.tools.common.util.CommonUtil;
import com.vzw.tools.consumer.configuration.FusionConfiguration;
import com.vzw.tools.consumer.entity.FusionResponse;
import com.vzw.tools.source.configuration.RunTimeMapInitializer;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.util.CollectionUtils;
import org.springframework.web.reactive.function.client.WebClient;
import org.springframework.web.reactive.function.client.WebClientResponseException;
import reactor.core.publisher.Mono;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

@Slf4j
@Service
public class FusionService {
    private FusionConfiguration fusionConfiguration;
    private final RunTimeMapInitializer runTimeMapInitializer;
    private final WebClient webClient = WebClient.builder().build();
    private static final ObjectMapper objectMapper = new ObjectMapper();


    @Autowired
    FusionService(FusionConfiguration fusionConfiguration, RunTimeMapInitializer runTimeMapInitializer) {
        this.fusionConfiguration = fusionConfiguration;
        this.runTimeMapInitializer = runTimeMapInitializer;
    }

    public Mono<JsonNode> getFusionServiceDetails(String sorID, String productType, String env) {
        //fusionServiceConfig.setupFusionEnvironment("qa1");
        log.info("Fetching fusion service details for sorId: {} in environment : {}", sorID, env);
        String url = fusionConfiguration.getHost(env) + fusionConfiguration.getSearch_By_SOR_API_URL() + CommonConstants.COLON + sorID;
        return webClient.get()
                .uri(url)
                .headers(headers -> headers.setBasicAuth(fusionConfiguration.getUsername(env), fusionConfiguration.getPassword(env)))
                .retrieve()
                .bodyToMono(JsonNode.class)
                .flatMap(response -> handleLoggingAndError(Mono.just(response), url, response, "fusion"));
    }

    /**
     * Reusable method for logging success and handling errors.
     */
    private Mono<JsonNode> handleLoggingAndError(Mono<JsonNode> mono, String apiPath, JsonNode responseType, String typeOfCall) {
        return mono.doOnSuccess(response -> logResponse(apiPath, response, typeOfCall))
                .doOnError(error -> log.error("Error occurred while calling {} API: {}", typeOfCall, apiPath, error))
                .onErrorResume(WebClientResponseException.class, ex -> {
                    log.error("{} API call failed with status: {}, body: {}", typeOfCall, ex.getStatusCode(), ex.getResponseBodyAsString());
                    return getDefaultResponse(responseType);
                })
                .onErrorResume(Exception.class, ex -> {
                    log.error("Unexpected error occurred while calling {} API: {}", typeOfCall, apiPath, ex);
                    return getDefaultResponse(responseType);
                });
    }

    /**
     * Logs API response in JSON format.
     */
    private <R> void logResponse(String apiPath, R response, String typeOfCall) {
        try {
            log.info("Received response from {} API: {}, Response: {}", typeOfCall, apiPath, objectMapper.writeValueAsString(response));
        } catch (Exception e) {
            log.error("Error while logging response for API: {}", apiPath, e);
        }
    }

    /**
     * Returns a default instance of responseType if an error occurs.
     */
    private Mono<JsonNode> getDefaultResponse(JsonNode responseType) {
        try {

            //log.info("Returning default instance of response type: {}", responseType.getSimpleName());
            return Mono.just(responseType);
        } catch (Exception e) {
            log.error("Failed to create a default instance of response type: {}", responseType, e);
            return Mono.empty();
        }
    }

    public Mono<Map<String, String>> getFusionMappedJson1(String sorId, String sys, String productType) {
        return getFusionServiceDetails(sorId, sys, productType)
                .flatMap(fusionDeviceDetails -> getFusionMappedJson(fusionDeviceDetails))
                .onErrorResume(Exception.class, ex -> {
                    log.error("Unexpected error occurred while calling fusion api");
                    return Mono.just(new HashMap<>());
                });

    }

    public Mono<Map<String, String>> getFusionMappedJson(JsonNode fusionResponse) {
        Map<String, String> fusionMapJson = new HashMap<>();
        try {
                    Map<String, String> fusionMapWithApiValues = convertFusionResponseToMap(fusionResponse);
                    Map<String, String> cacheMap = runTimeMapInitializer.getFusionMap();
                    for (Map.Entry<String, String> e : cacheMap.entrySet()) {
                        String value = fusionMapWithApiValues.get(e.getValue());
                        fusionMapJson.putIfAbsent(e.getKey(), value);
                    }
        } catch (Exception e) {
            throw new RuntimeException(e);
        }
        return Mono.just(fusionMapJson);
    }

    public Map<String, String> convertFusionResponseToMap(JsonNode fusionResponse) {
        JsonNode docsArray = fusionResponse.path("response").path("docs");
        Map<String, String> resultMap = new HashMap<>();
        if (docsArray.isArray()) {
            for (JsonNode docNode : docsArray) {
                docNode.fields().forEachRemaining(entry -> {
                    JsonNode valueNode = entry.getValue();

                    // Check if the field is an array
                    if (valueNode.isArray()) {
                        List<String> values = new ArrayList<>();
                        valueNode.forEach(item -> values.add(item.asText()));
                        resultMap.put(entry.getKey(), String.join(", ", values)); // Convert array to comma-separated string
                    } else {
                        resultMap.put(entry.getKey(), valueNode.asText());
                    }
                });
            }
        }
        return resultMap;

    }
}
-------------------------------------------------------------------------------
package com.vzw.tools.consumer.service;

import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.vzw.tools.consumer.configuration.FusionConfiguration;
import com.vzw.tools.source.configuration.RunTimeMapInitializer;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.web.reactive.function.client.WebClient;
import org.springframework.web.reactive.function.client.WebClientResponseException;
import reactor.core.publisher.Mono;
import reactor.test.StepVerifier;

import java.nio.charset.StandardCharsets;

import static org.mockito.ArgumentMatchers.anyString;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
class FusionServiceTest {

    @Mock
    private FusionConfiguration fusionConfiguration;

    @Mock
    private RunTimeMapInitializer runTimeMapInitializer;

    @Mock
    private WebClient.Builder webClientBuilder;

    @Mock
    private WebClient webClient;

    @Mock
    private WebClient.RequestHeadersUriSpec requestHeadersUriSpec;

    @Mock
    private WebClient.RequestHeadersSpec requestHeadersSpec;

    @Mock
    private WebClient.ResponseSpec responseSpec;

    @InjectMocks
    private FusionService fusionService;

    private static final ObjectMapper objectMapper = new ObjectMapper();
    private static final String SAMPLE_JSON_RESPONSE = "{ \"response\": { \"docs\": [{\"sku_id_s\": \"sku6004671\", \"brand\": \"Apple\"}] } }";

    private JsonNode jsonResponse;

    @BeforeEach
    void setUp() throws Exception {
        jsonResponse = objectMapper.readTree(SAMPLE_JSON_RESPONSE);
        
        // Mock Fusion Configuration
        when(fusionConfiguration.getHost(anyString())).thenReturn("https://mocked-url.com");
        when(fusionConfiguration.getSearch_By_SOR_API_URL()).thenReturn("/fusion/search");
        when(fusionConfiguration.getUsername(anyString())).thenReturn("user");
        when(fusionConfiguration.getPassword(anyString())).thenReturn("password");

        // Mock WebClient
        when(webClientBuilder.build()).thenReturn(webClient);
        when(webClient.get()).thenReturn(requestHeadersUriSpec);
        when(requestHeadersUriSpec.uri(anyString())).thenReturn(requestHeadersSpec);
        when(requestHeadersSpec.headers(any())).thenReturn(requestHeadersSpec);
        when(requestHeadersSpec.retrieve()).thenReturn(responseSpec);
    }

    /**
     * Test: Successful API call
     */
    @Test
    void getFusionServiceDetails_Success() {
        // Mock successful API response
        when(responseSpec.bodyToMono(JsonNode.class)).thenReturn(Mono.just(jsonResponse));

        Mono<JsonNode> result = fusionService.getFusionServiceDetails("12345", "Mobile", "QA");

        StepVerifier.create(result)
                .expectNext(jsonResponse)
                .verifyComplete();

        verify(webClient, times(1)).get();
    }

    /**
     * Test: WebClientResponseException Handling
     */
    @Test
    void getFusionServiceDetails_WebClientException() {
        WebClientResponseException webClientException = WebClientResponseException.create(
                500, "Internal Server Error", null, "Error".getBytes(StandardCharsets.UTF_8), null
        );

        when(responseSpec.bodyToMono(JsonNode.class)).thenReturn(Mono.error(webClientException));

        Mono<JsonNode> result = fusionService.getFusionServiceDetails("12345", "Mobile", "QA");

        StepVerifier.create(result)
                .verifyComplete(); // Should return default response (empty Mono)

        verify(webClient, times(1)).get();
    }

    /**
     * Test: Unexpected Exception Handling
     */
    @Test
    void getFusionServiceDetails_UnexpectedException() {
        when(responseSpec.bodyToMono(JsonNode.class)).thenThrow(new RuntimeException("Unexpected Error"));

        Mono<JsonNode> result = fusionService.getFusionServiceDetails("12345", "Mobile", "QA");

        StepVerifier.create(result)
                .verifyComplete(); // Should return default response (empty Mono)

        verify(webClient, times(1)).get();
    }
}

