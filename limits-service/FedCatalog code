package com.vzw.tools.persistence.service;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.vzw.tools.persistence.configuration.FederatedDBConfiguration;
import com.vzw.tools.source.dao.DeviceDPIDAO;
import com.vzw.tools.common.exception.ErrorMessages;
import com.vzw.tools.common.exception.XmlConversionException;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.jdbc.core.BeanPropertyRowMapper;
import org.springframework.jdbc.core.namedparam.MapSqlParameterSource;
import org.springframework.jdbc.core.namedparam.SqlParameterSource;
import org.springframework.jdbc.core.simple.SimpleJdbcCall;
import org.springframework.stereotype.Component;
import org.springframework.util.LinkedCaseInsensitiveMap;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

import java.math.BigDecimal;
import java.util.*;

import static com.vzw.tools.common.constant.CommonConstants.*;

@Component
@Slf4j
public class FedCatalogGetDataService {

    private final FederatedDBConfiguration fedCatalogConfiguration;

    @Autowired
    public FedCatalogGetDataService(FederatedDBConfiguration fedCatalogConfiguration) {
        this.fedCatalogConfiguration = fedCatalogConfiguration;
    }


    public Mono<HashMap<String,String>> fedCatalogDeviceDetails(String sorId, String productType, String env) throws XmlConversionException {

        SimpleJdbcCall simpleJdbcCall = new SimpleJdbcCall(fedCatalogConfiguration.jdbcTemplateForEnv(env))
                .withSchemaName(EPCREP_SCHEMA)
                .withProcedureName(retreiveStoredProcedure(productType))
                .returningResultSet(DEVICE_INFO, new BeanPropertyRowMapper<>(HashMap.class));
        SqlParameterSource inParams = new MapSqlParameterSource()
                .addValue(P_SOR_ID, sorId);

        Map<String,Object> result = simpleJdbcCall.execute(inParams);

       ArrayList<LinkedCaseInsensitiveMap<Object>> al=  (ArrayList<LinkedCaseInsensitiveMap<Object>>)result.get("P_RESULT_SET");
       HashMap<String,String> fedCatalogMap = new HashMap<>();
       if(al != null){
           LinkedCaseInsensitiveMap<Object> caseInsensitiveMap = al.get(0);
           for(Map.Entry<String,Object> entry : caseInsensitiveMap.entrySet() ){
               fedCatalogMap.put(entry.getKey(),entry.getValue()!=null ? entry.getValue().toString():null);
           }
           return Mono.just(fedCatalogMap);
       }
       else {
           return Mono.just(fedCatalogMap);
       }
    }

    public String retreiveStoredProcedure(String productType){
        if(productType.equalsIgnoreCase(PROD_TYPE_DEVICE))
            return FEDCATALOG_SP_DEVICE;
        else if(productType.equalsIgnoreCase(PROD_TYPE_ACCESSORY))
            return FEDCATALOG_SP_ACCESSORY;
        else {
            return " ";
        }
    }

}
----------------------------------------------------------------------------------
@Component
@Slf4j
public class FedCatalogGetDataService {

    private final FederatedDBConfiguration fedCatalogConfiguration;
    private final SimpleJdbcCall simpleJdbcCall;

    @Autowired
    public FedCatalogGetDataService(FederatedDBConfiguration fedCatalogConfiguration, JdbcTemplate jdbcTemplate) {
        this.fedCatalogConfiguration = fedCatalogConfiguration;
        this.simpleJdbcCall = new SimpleJdbcCall(jdbcTemplate); // Initialize with a default JdbcTemplate
    }

    public Mono<Map<String, Object>> fedCatalogDeviceDetails(String sorId, String productType, String env) throws XmlConversionException {
        String procedureName = retrieveStoredProcedure(productType);
        if (procedureName.isBlank()) {
            log.error("Invalid product type: {}", productType);
            return Mono.error(new IllegalArgumentException("Invalid product type"));
        }

        // Reconfigure SimpleJdbcCall dynamically based on the environment
        SimpleJdbcCall configuredJdbcCall = simpleJdbcCall
                .withJdbcTemplate(fedCatalogConfiguration.jdbcTemplateForEnv(env))
                .withSchemaName(EPCREP_SCHEMA)
                .withProcedureName(procedureName)
                .returningResultSet(DEVICE_INFO, new BeanPropertyRowMapper<>(LinkedCaseInsensitiveMap.class));

        SqlParameterSource inParams = new MapSqlParameterSource().addValue(P_SOR_ID, sorId);
        Map<String, Object> result = configuredJdbcCall.execute(inParams);

        List<LinkedCaseInsensitiveMap<Object>> resultList = (List<LinkedCaseInsensitiveMap<Object>>) result.getOrDefault("P_RESULT_SET", Collections.emptyList());

        if (resultList.isEmpty()) {
            log.info("No records found for SOR ID: {} in environment: {}", sorId, env);
            return Mono.just(Collections.emptyMap());
        }

        LinkedCaseInsensitiveMap<Object> caseInsensitiveMap = resultList.get(0);
        return Mono.just(new HashMap<>(caseInsensitiveMap));
    }

    private String retrieveStoredProcedure(String productType) {
        return switch (productType.toUpperCase()) {
            case PROD_TYPE_DEVICE -> FEDCATALOG_SP_DEVICE;
            case PROD_TYPE_ACCESSORY -> FEDCATALOG_SP_ACCESSORY;
            default -> "";
        };
    }
}

