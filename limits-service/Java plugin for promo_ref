package com.informatica.powercenter.server.jtx;

import com.informatica.powercenter.sdk.server.IBufferInit;
import com.informatica.powercenter.sdk.server.IInputBuffer;
import com.informatica.powercenter.sdk.server.IOutputBuffer;
import com.informatica.powercenter.sdk.repository.IGroup;
import com.informatica.powercenter.sdk.repository.IField;
import com.informatica.powercenter.sdk.SDKException;
import com.informatica.powercenter.sdk.server.ERowType;
import com.informatica.powercenter.sdk.server.ELogMsgLevel;
import com.informatica.powercenter.sdk.server.ct.ECTTransformationScope;
import com.informatica.powercenter.sdk.MessageCatalog;
import com.informatica.powercenter.sdk.server.DataTruncatedException;
import java.math.BigDecimal;
import java.util.List;

// Start of 'Import Package' snippet.
// ToDo: Enter the Java packages to be  imported here
// For example, if you want to use Hashtable in any of the snippets, import the Hashtable // as shown below:
//
// import java.util.Hashtable;


import com.epc.inbound.VisionFeedLoader;
import java.util.HashMap;
// End of 'Import Package' snippet.

/**
 * This class is a partition level class, which encapsulates the logic specified
 * by the user in various Java Transformation code snippets. One instance of this
 * class will be used to serve each partition.
 */
public class JTXPartitionDriverImplGen extends JTXPartitionDriverImplFixed
{

    // Start of 'Helper code' snippet.
    // ToDo: Declare static and non-static  partition level variables and functions here
    // For example,
    //
    // static int countNullRows;            // counts the number of output rows across all partitions containing null values
    // int partCountNullRows;               // counts the number of output rows in this partition containing null values
    //
    // static Object lock = new Object();   // lock to synchronize countNullRows
   
   
    VisionFeedLoader obj=new VisionFeedLoader();
    // End of 'Helper code' snippet.


    private StringBuffer strBuf = new StringBuffer();    
    private String SOR_PROMO_ID;
    private String sor_promo_desc;
    private String sor_promo_effec_date;
    private String sor_promo_end_date;
    private String sor_promo_scrn_cde;
    private String promo_spcl_proc_cd;
    private String promo_display_name;
    private String suppress_landing_promo_flag;
    private String ASSET_TYPE;
    private String FEED_NAME;

    /**
     * This function is called by PowerCenter engine once per session for
     * a given transformation partition.
     * @param inBufInit List of objects of IBufferInit for input groups.
     * @param outBufInit List of objects of IBufferInit for output groups.
     */
    public void init(List inBufInits, List outBufInits) throws SDKException
    {
        IBufferInit inBufInit = (IBufferInit)inBufInits.get(0);
        IBufferInit outBufInit = (IBufferInit)outBufInits.get(0);
        outputBufCap = outBufInit.getCapacity();
        initialize();

        if(isInFldConnected("SOR_PROMO_ID"))
        {
            if(JTXUtils.isServerUnicodeMode())
                inBufInit.bindColumnDataType(0,IField.JDataType.UNICHAR);
            else
                inBufInit.bindColumnDataType(0,IField.JDataType.CHAR);
        }

        if(isInFldConnected("sor_promo_desc"))
        {
            if(JTXUtils.isServerUnicodeMode())
                inBufInit.bindColumnDataType(1,IField.JDataType.UNICHAR);
            else
                inBufInit.bindColumnDataType(1,IField.JDataType.CHAR);
        }

        if(isInFldConnected("sor_promo_effec_date"))
        {
            if(JTXUtils.isServerUnicodeMode())
                inBufInit.bindColumnDataType(2,IField.JDataType.UNICHAR);
            else
                inBufInit.bindColumnDataType(2,IField.JDataType.CHAR);
        }

        if(isInFldConnected("sor_promo_end_date"))
        {
            if(JTXUtils.isServerUnicodeMode())
                inBufInit.bindColumnDataType(3,IField.JDataType.UNICHAR);
            else
                inBufInit.bindColumnDataType(3,IField.JDataType.CHAR);
        }

        if(isInFldConnected("sor_promo_scrn_cde"))
        {
            if(JTXUtils.isServerUnicodeMode())
                inBufInit.bindColumnDataType(4,IField.JDataType.UNICHAR);
            else
                inBufInit.bindColumnDataType(4,IField.JDataType.CHAR);
        }

        if(isInFldConnected("promo_spcl_proc_cd"))
        {
            if(JTXUtils.isServerUnicodeMode())
                inBufInit.bindColumnDataType(5,IField.JDataType.UNICHAR);
            else
                inBufInit.bindColumnDataType(5,IField.JDataType.CHAR);
        }

        if(isInFldConnected("promo_display_name"))
        {
            if(JTXUtils.isServerUnicodeMode())
                inBufInit.bindColumnDataType(6,IField.JDataType.UNICHAR);
            else
                inBufInit.bindColumnDataType(6,IField.JDataType.CHAR);
        }

        if(isInFldConnected("suppress_landing_promo_flag"))
        {
            if(JTXUtils.isServerUnicodeMode())
                inBufInit.bindColumnDataType(7,IField.JDataType.UNICHAR);
            else
                inBufInit.bindColumnDataType(7,IField.JDataType.CHAR);
        }

        if(isInFldConnected("ASSET_TYPE"))
        {
            if(JTXUtils.isServerUnicodeMode())
                inBufInit.bindColumnDataType(8,IField.JDataType.UNICHAR);
            else
                inBufInit.bindColumnDataType(8,IField.JDataType.CHAR);
        }

        if(isInFldConnected("FEED_NAME"))
        {
            if(JTXUtils.isServerUnicodeMode())
                inBufInit.bindColumnDataType(9,IField.JDataType.UNICHAR);
            else
                inBufInit.bindColumnDataType(9,IField.JDataType.CHAR);
        }

        if(isOutFldProjected("SOR_PROMO_ID"))
        {
            if(JTXUtils.isServerUnicodeMode())
                outBufInit.bindColumnDataType(0,IField.JDataType.UNICHAR);
            else
                outBufInit.bindColumnDataType(0,IField.JDataType.CHAR);
        }

        if(isOutFldProjected("sor_promo_desc"))
        {
            if(JTXUtils.isServerUnicodeMode())
                outBufInit.bindColumnDataType(1,IField.JDataType.UNICHAR);
            else
                outBufInit.bindColumnDataType(1,IField.JDataType.CHAR);
        }

        if(isOutFldProjected("sor_promo_effec_date"))
        {
            if(JTXUtils.isServerUnicodeMode())
                outBufInit.bindColumnDataType(2,IField.JDataType.UNICHAR);
            else
                outBufInit.bindColumnDataType(2,IField.JDataType.CHAR);
        }

        if(isOutFldProjected("sor_promo_end_date"))
        {
            if(JTXUtils.isServerUnicodeMode())
                outBufInit.bindColumnDataType(3,IField.JDataType.UNICHAR);
            else
                outBufInit.bindColumnDataType(3,IField.JDataType.CHAR);
        }

        if(isOutFldProjected("sor_promo_scrn_cde"))
        {
            if(JTXUtils.isServerUnicodeMode())
                outBufInit.bindColumnDataType(4,IField.JDataType.UNICHAR);
            else
                outBufInit.bindColumnDataType(4,IField.JDataType.CHAR);
        }

        if(isOutFldProjected("promo_spcl_proc_cd"))
        {
            if(JTXUtils.isServerUnicodeMode())
                outBufInit.bindColumnDataType(5,IField.JDataType.UNICHAR);
            else
                outBufInit.bindColumnDataType(5,IField.JDataType.CHAR);
        }

        if(isOutFldProjected("promo_display_name"))
        {
            if(JTXUtils.isServerUnicodeMode())
                outBufInit.bindColumnDataType(6,IField.JDataType.UNICHAR);
            else
                outBufInit.bindColumnDataType(6,IField.JDataType.CHAR);
        }

        if(isOutFldProjected("suppress_landing_promo_flag"))
        {
            if(JTXUtils.isServerUnicodeMode())
                outBufInit.bindColumnDataType(7,IField.JDataType.UNICHAR);
            else
                outBufInit.bindColumnDataType(7,IField.JDataType.CHAR);
        }

        if(isOutFldProjected("ASSET_TYPE"))
        {
            if(JTXUtils.isServerUnicodeMode())
                outBufInit.bindColumnDataType(8,IField.JDataType.UNICHAR);
            else
                outBufInit.bindColumnDataType(8,IField.JDataType.CHAR);
        }

        if(isOutFldProjected("FEED_NAME"))
        {
            if(JTXUtils.isServerUnicodeMode())
                outBufInit.bindColumnDataType(9,IField.JDataType.UNICHAR);
            else
                outBufInit.bindColumnDataType(9,IField.JDataType.CHAR);
        }
    }

    /**
     * This function is called by PowerCenter engine when data is available
     * for the input group.
     * @param grp Input group on which the data is available.
     * @param inputBuf Input Data buffer corresponding to the group.
     */
    public void execute(IGroup grp, IInputBuffer inputBuf) throws SDKException
    {
        setInputBuffer(inputBuf);
        outputBuf = (IOutputBuffer)getOutputBuffers().get(0);
        int numRowsAvailable = inputBuf.getNumRowsAvailable();
        inRowNum=0;

        Object defaultObj;
       

        for(int jtx_row_counter=1 ;jtx_row_counter<= numRowsAvailable;jtx_row_counter++)
        {
            try
            {

               

                SOR_PROMO_ID = null;
                sor_promo_desc = null;
                sor_promo_effec_date = null;
                sor_promo_end_date = null;
                sor_promo_scrn_cde = null;
                promo_spcl_proc_cd = null;
                promo_display_name = null;
                suppress_landing_promo_flag = null;
                ASSET_TYPE = null;
                FEED_NAME = null;
               

                if(isInFldConnected("SOR_PROMO_ID") && !inputBuf.isNull(inRowNum,0))
                {
                    strBuf.setLength(0);
                    inputBuf.getStringBuffer(inRowNum,0,strBuf);
                    SOR_PROMO_ID = strBuf.toString();
                }

                if(isInFldConnected("sor_promo_desc") && !inputBuf.isNull(inRowNum,1))
                {
                    strBuf.setLength(0);
                    inputBuf.getStringBuffer(inRowNum,1,strBuf);
                    sor_promo_desc = strBuf.toString();
                }

                if(isInFldConnected("sor_promo_effec_date") && !inputBuf.isNull(inRowNum,2))
                {
                    strBuf.setLength(0);
                    inputBuf.getStringBuffer(inRowNum,2,strBuf);
                    sor_promo_effec_date = strBuf.toString();
                }

                if(isInFldConnected("sor_promo_end_date") && !inputBuf.isNull(inRowNum,3))
                {
                    strBuf.setLength(0);
                    inputBuf.getStringBuffer(inRowNum,3,strBuf);
                    sor_promo_end_date = strBuf.toString();
                }

                if(isInFldConnected("sor_promo_scrn_cde") && !inputBuf.isNull(inRowNum,4))
                {
                    strBuf.setLength(0);
                    inputBuf.getStringBuffer(inRowNum,4,strBuf);
                    sor_promo_scrn_cde = strBuf.toString();
                }

                if(isInFldConnected("promo_spcl_proc_cd") && !inputBuf.isNull(inRowNum,5))
                {
                    strBuf.setLength(0);
                    inputBuf.getStringBuffer(inRowNum,5,strBuf);
                    promo_spcl_proc_cd = strBuf.toString();
                }

                if(isInFldConnected("promo_display_name") && !inputBuf.isNull(inRowNum,6))
                {
                    strBuf.setLength(0);
                    inputBuf.getStringBuffer(inRowNum,6,strBuf);
                    promo_display_name = strBuf.toString();
                }

                if(isInFldConnected("suppress_landing_promo_flag") && !inputBuf.isNull(inRowNum,7))
                {
                    strBuf.setLength(0);
                    inputBuf.getStringBuffer(inRowNum,7,strBuf);
                    suppress_landing_promo_flag = strBuf.toString();
                }

                if(isInFldConnected("ASSET_TYPE") && !inputBuf.isNull(inRowNum,8))
                {
                    strBuf.setLength(0);
                    inputBuf.getStringBuffer(inRowNum,8,strBuf);
                    ASSET_TYPE = strBuf.toString();
                }

                if(isInFldConnected("FEED_NAME") && !inputBuf.isNull(inRowNum,9))
                {
                    strBuf.setLength(0);
                    inputBuf.getStringBuffer(inRowNum,9,strBuf);
                    FEED_NAME = strBuf.toString();
                }

                if(isVerbose)
                {
                    utilsServer.logMsg(ELogMsgLevel.INFO, BEGIN_INPUT_ROW);
                }

                // Start of 'On Input Row' code snippet.
                HashMap<String, String> map = new HashMap<>();
                map.put("sor_promo_id",SOR_PROMO_ID);
                map.put("sor_promo_desc",sor_promo_desc);
                map.put("sor_promo_effec_date",sor_promo_effec_date);
                map.put("sor_promo_end_date",sor_promo_end_date);
                map.put("sor_promo_scrn_cde",sor_promo_scrn_cde);
                map.put("promo_spcl_proc_cd",promo_spcl_proc_cd);
                map.put("promo_display_name",promo_display_name);
                map.put("suppress_landing_promo_flag",suppress_landing_promo_flag);
               
                try {
                        System.out.println(obj.processVisionFeedData(map, FEED_NAME,ASSET_TYPE));
                        }catch(Exception e)
                        {
                            System.out.println(e.getMessage());
                        }
                // End of 'On Input Row' code snippet.

                if(isFatalExceptionThrown)
                {
                    throw new JTXFatalException(fatalMsg);
                }

                if(isVerbose)
                {
                    utilsServer.logMsg(ELogMsgLevel.INFO, EXIT_INPUT_ROW);
                }

                if(transScope == ECTTransformationScope.ROW)
                {
                    flushBuf();
                }

            }
            catch (SDKException e)
            {
                handleException(e);
            }
            prepareForInputRow();
        }
    }

    /**
     * This function is called by PowerCenter engine when no more data is
     * available for the input group.
     * @param iGroup input group for which all the data has been processed.
     */
    public void eofNotification(IGroup group) throws SDKException
    {
        try
        {
            flushBuf();
        }
        catch(SDKException e)
        {
            handleException(e);
        }
    }

    /**
     * This function is called by PowerCenter engine when there is a
     * transaction notification. This function will be called only if
     * Java Transformation has the 'Transformation Scope' set to 'transaction'.
     * @param transType one of COMMIT or ROLLBACK.
     */
    public void inputTransaction(int transType) throws SDKException
    {
        try
        {
            flushBuf();
            outputBuf = (IOutputBuffer) getOutputBuffers().get(0);
        }
        catch(SDKException e)
        {
            handleException(e);
        }
    }

    /**
     * This is a callable API and is not called by PowerCenter engine.
     * This function is called by user to generate an output row in
     * 'On Input Row', 'On Transactaction' and 'On End of Data' snippets
     * for an active transformation.
     */
    private void generateRow() throws SDKException
    {
        if(isOutFldProjected("SOR_PROMO_ID") && (!isSetNullCalled("SOR_PROMO_ID")))
        {
            if(SOR_PROMO_ID == null)
                outputBuf.setNull(outRowNum, 0);
            else
            {
                try
                {
                    outputBuf.setString(outRowNum, 0, SOR_PROMO_ID);
                }
                catch(DataTruncatedException e)
                {
                    handleDataTruncatedException("SOR_PROMO_ID");
                }
            }
        }

        if(isOutFldProjected("sor_promo_desc") && (!isSetNullCalled("sor_promo_desc")))
        {
            if(sor_promo_desc == null)
                outputBuf.setNull(outRowNum, 1);
            else
            {
                try
                {
                    outputBuf.setString(outRowNum, 1, sor_promo_desc);
                }
                catch(DataTruncatedException e)
                {
                    handleDataTruncatedException("sor_promo_desc");
                }
            }
        }

        if(isOutFldProjected("sor_promo_effec_date") && (!isSetNullCalled("sor_promo_effec_date")))
        {
            if(sor_promo_effec_date == null)
                outputBuf.setNull(outRowNum, 2);
            else
            {
                try
                {
                    outputBuf.setString(outRowNum, 2, sor_promo_effec_date);
                }
                catch(DataTruncatedException e)
                {
                    handleDataTruncatedException("sor_promo_effec_date");
                }
            }
        }

        if(isOutFldProjected("sor_promo_end_date") && (!isSetNullCalled("sor_promo_end_date")))
        {
            if(sor_promo_end_date == null)
                outputBuf.setNull(outRowNum, 3);
            else
            {
                try
                {
                    outputBuf.setString(outRowNum, 3, sor_promo_end_date);
                }
                catch(DataTruncatedException e)
                {
                    handleDataTruncatedException("sor_promo_end_date");
                }
            }
        }

        if(isOutFldProjected("sor_promo_scrn_cde") && (!isSetNullCalled("sor_promo_scrn_cde")))
        {
            if(sor_promo_scrn_cde == null)
                outputBuf.setNull(outRowNum, 4);
            else
            {
                try
                {
                    outputBuf.setString(outRowNum, 4, sor_promo_scrn_cde);
                }
                catch(DataTruncatedException e)
                {
                    handleDataTruncatedException("sor_promo_scrn_cde");
                }
            }
        }

        if(isOutFldProjected("promo_spcl_proc_cd") && (!isSetNullCalled("promo_spcl_proc_cd")))
        {
            if(promo_spcl_proc_cd == null)
                outputBuf.setNull(outRowNum, 5);
            else
            {
                try
                {
                    outputBuf.setString(outRowNum, 5, promo_spcl_proc_cd);
                }
                catch(DataTruncatedException e)
                {
                    handleDataTruncatedException("promo_spcl_proc_cd");
                }
            }
        }

        if(isOutFldProjected("promo_display_name") && (!isSetNullCalled("promo_display_name")))
        {
            if(promo_display_name == null)
                outputBuf.setNull(outRowNum, 6);
            else
            {
                try
                {
                    outputBuf.setString(outRowNum, 6, promo_display_name);
                }
                catch(DataTruncatedException e)
                {
                    handleDataTruncatedException("promo_display_name");
                }
            }
        }

        if(isOutFldProjected("suppress_landing_promo_flag") && (!isSetNullCalled("suppress_landing_promo_flag")))
        {
            if(suppress_landing_promo_flag == null)
                outputBuf.setNull(outRowNum, 7);
            else
            {
                try
                {
                    outputBuf.setString(outRowNum, 7, suppress_landing_promo_flag);
                }
                catch(DataTruncatedException e)
                {
                    handleDataTruncatedException("suppress_landing_promo_flag");
                }
            }
        }

        if(isOutFldProjected("ASSET_TYPE") && (!isSetNullCalled("ASSET_TYPE")))
        {
            if(ASSET_TYPE == null)
                outputBuf.setNull(outRowNum, 8);
            else
            {
                try
                {
                    outputBuf.setString(outRowNum, 8, ASSET_TYPE);
                }
                catch(DataTruncatedException e)
                {
                    handleDataTruncatedException("ASSET_TYPE");
                }
            }
        }

        if(isOutFldProjected("FEED_NAME") && (!isSetNullCalled("FEED_NAME")))
        {
            if(FEED_NAME == null)
                outputBuf.setNull(outRowNum, 9);
            else
            {
                try
                {
                    outputBuf.setString(outRowNum, 9, FEED_NAME);
                }
                catch(DataTruncatedException e)
                {
                    handleDataTruncatedException("FEED_NAME");
                }
            }
        }
        incrementOutputRowNumber();
        flushBufWhenFull();
        clearNullColSet();
    }
}
----------------------------------------------------
private static String processingpromoRefFeed(Map<String, String> map, String feedName, String assetType) throws Exception {

		try {
			if (map.get("sor_promo_end_date") != null) {
				map.put("sor_promo_end_date", getUTCToLocalDate(map.get("sor_promo_end_date")));
			}
			if (map.get("sor_promo_effec_date") != null) {
				map.put("sor_promo_effec_date", getUTCToLocalDate(map.get("sor_promo_effec_date")));
			}
			
			if(map.get("sor_promo_scrn_cde") != null) {
				map.put("sor_promo_scrn_cde", map.get("sor_promo_scrn_cde").trim());
			}
			

			SearchRequestAdapter searchRequestAdapter = new SearchRequestAdapter();
			VisionFeedTemplateProcessing visionFeedTemplateProcessing = new VisionFeedTemplateProcessing();
			ArrayList<String> sorPromoList = new ArrayList<String>();
			sorPromoList.add(map.get("sor_promo_id"));
			ArrayList<String> catalogOneIdVisionPromoRefList = (ArrayList<String>) searchRequestAdapter.getCOneID(
					sorPromoList, "genericelemententry", "visionPromoRef.sorPromoId", true,
					InputReader.getConfiguationPropertyValue("visionPromoRefSchemaId"));

			if (null != catalogOneIdVisionPromoRefList && catalogOneIdVisionPromoRefList.size() > 0) {
				
				if(map.containsKey("promo_display_name")) {
					map.remove("promo_display_name"); 
				}
				
				DomainApiAdapter domainApiAdapter = new DomainApiAdapter();
				JsonNode geeTemplate = domainApiAdapter.getGEETemplate(catalogOneIdVisionPromoRefList.get(0));
				visionFeedTemplateProcessing.createGeeFromDomainTemplate(geeTemplate, map, feedName, assetType,
						catalogOneIdVisionPromoRefList.get(0));
				generateFile(map.get("sor_promo_id"), "update", folderPath, "PROMO_VISION_FEED.txt", assetType);
				return "success";

			} else {
				visionFeedTemplateProcessing.createGeeFromExistingTemplate(map, feedName, assetType);
				generateFile(map.get("sor_promo_id"), "create", folderPath, "PROMO_VISION_FEED.txt", assetType);
				return "success";
			}
		} catch (Exception e) {
			VisionFeedLoader.generateFile(map.get("sor_promo_id"), InboundConstants.FALIURE, folderPath,"PROMO_VISION_FEED.txt", assetType);
			log.error("Method: processingpromoRefFeed :::  Exception::: {}", e.getMessage());
			//emailService.sendParserExceptionMail("During Vision Promo Ref Data Processing::"+e.toString(), e.getClass().getName());
			throw e;
		}
