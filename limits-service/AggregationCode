package com.vzw.federated_catalog_tools_ms.service;

import com.vzw.federated_catalog_tools_ms.entity.dmd.DeviceInfo;
import com.vzw.federated_catalog_tools_ms.util.constants.DeviceConstants;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

import java.util.HashMap;

@Service
public class DataAggregationService {

    @Autowired
    private DMDGetDataService dmdGetDataService;

    @Autowired
    private DPIGetDataService dpiGetDataService;

    public Mono<HashMap<String, Object>> fetchAllData(String sorid){
      return Mono.zip(dmdGetDataService.getDMDDeviceDetails(DeviceConstants.DMD,DeviceConstants.DMD_SORID,DeviceConstants.DEVICE).collectList(),
             dpiGetDataService.getDPIDeviceDetails(DeviceConstants.DPI,DeviceConstants.DPI_SORID,DeviceConstants.DEVICE).collectList() )
              .map(results -> {
             HashMap<String,Object> resultMap = new HashMap<>();
             resultMap.put(DeviceConstants.DMD, results.getT1());
          resultMap.put( DeviceConstants.DPI, results.getT2());
          return resultMap;
      });
    }

}
----------------------------------------------------------------------------------
@GetMapping("/getCatalogAggregatedSourceDetails/{type}/{sys}")
    public Mono<Map<String, Object>> fetchAllDevices(@PathVariable String type, @PathVariable String sys,@RequestParam(value = "sorId", required = true) String sorId) {
        return dataAggregationService.fetchAllData(sorId)
                .map(resultMap -> {
                    Map<String, Object> response = new HashMap<>();

                    // Extract and cast the results
                    List<DeviceInfo> dmdDevices = (List<DeviceInfo>) resultMap.get(DeviceConstants.DMD);
                    List<DPIModel> dpiDevices = (List<DPIModel>) resultMap.get(DeviceConstants.DPI);

                    // Add results to the response
                    response.put(DeviceConstants.DMD, dmdDevices);
                    response.put(DeviceConstants.DPI, dpiDevices);

                    return response;
                });
    }
