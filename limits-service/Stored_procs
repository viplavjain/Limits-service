create or replace PROCEDURE            "APMS191P_PROCESS" (
    p_cor_rel_id IN varchar2,
    v_jobid  OUT NUMBER,
    v_status OUT VARCHAR2,
    p_seq_no NUMBER
) AS
/*=============================================================================================+
  |                               Copyright (c) 2024 Verizon                                     |
  |                                 All rights reserved.                                         |
  +==============================================================================================+
  |
  | Header            : $1.0
  | File              : APMS191P
  | Procedure Name    : APMS191P
  | Developed By      : Hareesh Balakrishnan
  | Description       : Procedure for APMS191P JOB
  |
  |  ***************************************** IMPORTANT! *****************************************
  |   If you need to change this file please ensure you :
  |           a) Increment the version number and update the change history.
  |           b) Comment the code with the version number and initials.
  |           c) Update the technical design document.
  |  **********************************************************************************************
  |
  |  Change History :
  |
  |  Who                    When            Version    Change (include Bug#if appropriate)
  |+----------------------+---------------+----------+--------------------------------------------+
  | Hareesh Balakrishnan  | 12-MAR-2024   | 1.0      | Initial Revision
  |+----------------------+---------------+----------+---------------------------------------------
  +==============================================================================================*/

    --variable declaration

    fp                 utl_file.file_type;
    l_dir_path         VARCHAR2(100)  := 'CPI_EFS_ORA_OUTPUT_APMS191P';
    l_curr_date        VARCHAR2(100)  :=to_char(sysdate, 'YYYYMMDD'); -- to_char(sysdate, 'DD-MON-YYYY');
    l_prev_date        VARCHAR2(100)  :=to_char(sysdate-1, 'YYYYMMDD');-- to_char(sysdate-1, 'DD-MON-YYYY');
    l_prev_file_name1  VARCHAR2(1000) := 'DD191AT_CLASSCD_TEMP'||'_'||l_curr_date||'.TXT';
    l_prev_file_name2  VARCHAR2(1000) := 'DD191AT_CLASSCD_DELTA_FINAL'||'_'||l_curr_date||'.TXT';

    l_file_name1       VARCHAR2(1000) := 'SPO_CATEGORY_CLASS_CODE_FEED'||'_'||l_curr_date||'.TXT';
    l_file_name2       VARCHAR2(1000) := 'SPO_CATEGORY_CLASS_CODE_FEED_DELTA'||'_'||l_curr_date||'.TXT';
    l_success_flag     VARCHAR2(10)   := 'SUCCESS';
    l_failure_flag     VARCHAR2(10)   := 'FAILURE';
    l_collect_limit1   NUMBER         := 10000;
    l_collect_limit2   NUMBER         := 1000;
    l_date             DATE           := sysdate;
    l_exist            NUMBER         := 0;
    l_cnt              NUMBER         := 0;
    l_cnt2              NUMBER         := 0;
    l_db_date DATE;
    my_errm VARCHAR2(32000);
    my_code number;
    -- Query to fetch the first data set
    CURSOR  cat_class_cd_cap_list IS
            SELECT * FROM BATCH_USER.APMS191P_OUTPUT; --PRC_CAT_CLASS_CD_CAP_V ;

    CURSOR  cat_class_cd_cap_delta_list IS
            SELECT * FROM PRC_CAT_CLASS_CD_CAP_DELTA_V;             


   TYPE cat_class_cd_cap_list_type IS
        TABLE OF cat_class_cd_cap_list%rowtype INDEX BY PLS_INTEGER;
    l_data_list1 cat_class_cd_cap_list_type;

   TYPE cat_class_cd_cap_delta_list_type IS
        TABLE OF cat_class_cd_cap_delta_list%rowtype INDEX BY PLS_INTEGER;
    l_data_list2 cat_class_cd_cap_delta_list_type;    

BEGIN
      --job log status 

       XXVZN_JOB_STATUS_LOG_PKG.XX_PR_JOB_RUN_STATUS(p_cor_rel_id,
                                                     v_jobid,
                                                     $$plsql_Unit,
                                                     $$plsql_Unit,
                                                     $$plsql_Unit||' Job Initiated',
                                                     $$plsql_line,
                                                     v_jobid ,
                                                     SYS_CONTEXT('USERENV','SESSION_USER'));                                          

    --job log status                                         
    INSERT INTO BATCH_USER.PMS_JOB_STATUS (correlation_id,s_id,task_name,
                                status,
                                start_date,
                                end_date,
                                created_by) 
    VALUES (p_cor_rel_id,p_seq_no,'APMS191P','CREATED',sysdate,null,'BATCH');
    COMMIT;



------- DATA HIST PROCESS STARTS----------------

    BEGIN
        SELECT trunc(CREATION_DATE)
        INTO l_db_date
        FROM BATCH_USER.APMS191P_OUTPUT
        WHERE ROWNUM <= 1;
    EXCEPTION
        WHEN NO_DATA_FOUND THEN
            l_db_date:=trunc(sysdate);
    END;

    IF l_db_date = trunc(sysdate) THEN
    EXECUTE IMMEDIATE 'TRUNCATE TABLE BATCH_USER.APMS191P_OUTPUT';
    --INSERTING LATEST RECORD IN APMS191P_OUTPUT TABLE
    INSERT INTO BATCH_USER.APMS191P_OUTPUT(PRC_CAT_CLASS_CD ,PRC_CAT_CLASS_DSC,OFFR_CNT)
    SELECT PRC_CAT_CLASS_CD ,PRC_CAT_CLASS_DSC,OFFR_CNT FROM PRC_CAT_CLASS_CD_CAP_V;
    COMMIT;
    END IF;

    IF l_db_date < trunc(sysdate) THEN

        -- LOAD THE PREV DATA INTO HISTORY TABLE
        INSERT INTO BATCH_USER.APMS191P_OUTPUT_HIST(PRC_CAT_CLASS_CD ,PRC_CAT_CLASS_DSC,OFFR_CNT,CREATION_DATE)
        SELECT PRC_CAT_CLASS_CD ,PRC_CAT_CLASS_DSC,OFFR_CNT,CREATION_DATE FROM BATCH_USER.APMS191P_OUTPUT_PREV ;
        COMMIT;
        -- TRUNCATE THE PREV DAY DATA FROM THE TABLE  
        EXECUTE IMMEDIATE 'TRUNCATE TABLE BATCH_USER.APMS191P_OUTPUT_PREV';

        -- LOAD THE CURRENT DATA INTO PREV TABLE
        INSERT INTO BATCH_USER.APMS191P_OUTPUT_PREV(PRC_CAT_CLASS_CD ,PRC_CAT_CLASS_DSC,OFFR_CNT,CREATION_DATE)
        SELECT PRC_CAT_CLASS_CD ,PRC_CAT_CLASS_DSC,OFFR_CNT,CREATION_DATE FROM BATCH_USER.APMS191P_OUTPUT ;
        COMMIT;     
        -- TRUNCATE THE CURRENT DATE DATA FROM THE TABLE
        EXECUTE IMMEDIATE 'TRUNCATE TABLE BATCH_USER.APMS191P_OUTPUT';

        --INSERTING LATEST RECORD IN APMS191P_OUTPUT TABLE
        INSERT INTO BATCH_USER.APMS191P_OUTPUT(PRC_CAT_CLASS_CD ,PRC_CAT_CLASS_DSC,OFFR_CNT)
        SELECT PRC_CAT_CLASS_CD ,PRC_CAT_CLASS_DSC,OFFR_CNT FROM PRC_CAT_CLASS_CD_CAP_V;
        COMMIT;

    END IF;

------- DATA HIST PROCESS END----------------

     --Delete file created in the previous day Job run, before creating the file for current day 
    SELECT dbms_lob.fileexists(bfilename(l_dir_path, l_prev_file_name1))
      INTO l_exist
      FROM dual;
    IF l_exist = 1 THEN
        utl_file.fremove(l_dir_path, l_prev_file_name1);
    END IF;

    SELECT dbms_lob.fileexists(bfilename(l_dir_path, l_prev_file_name2))
      INTO l_exist
      FROM dual;
    IF l_exist = 1 THEN
        utl_file.fremove(l_dir_path, l_prev_file_name2);
    END IF; -- l_exist = 1

    --query1 data copy to local variable
    OPEN cat_class_cd_cap_list;
    LOOP
        FETCH cat_class_cd_cap_list
        BULK COLLECT INTO l_data_list1;
        l_cnt := cat_class_cd_cap_list%rowcount;
        exit when cat_class_cd_cap_list%notfound;
    END LOOP;    
    CLOSE cat_class_cd_cap_list;

    --query2 data copy to local variable
    OPEN cat_class_cd_cap_delta_list;
    LOOP
        FETCH cat_class_cd_cap_delta_list
        BULK COLLECT INTO l_data_list2;
        l_cnt2 := nvl(cat_class_cd_cap_delta_list%rowcount,0);
        exit when cat_class_cd_cap_delta_list%notfound;
    END LOOP;    
    CLOSE cat_class_cd_cap_delta_list;    

    --job log status 
    XXVZN_JOB_STATUS_LOG_PKG.XX_PR_JOB_RUN_STATUS(p_cor_rel_id,
                                                  p_seq_no,
                                                  $$plsql_Unit,
                                                  $$plsql_Unit,
                                                  $$plsql_Unit||'Query In-Progress',
                                                  $$plsql_line,
                                                  null,
                                                  SYS_CONTEXT('USERENV','SESSION_USER')
                                                 );


    --query1 file creation
    IF l_cnt >0 THEN
        fp := utl_file.fopen(l_dir_path, l_file_name1, 'W');
        FOR i IN l_data_list1.first..l_data_list1.last LOOP

            UTL_FILE.PUT_LINE(fp, ''|| trim(l_data_list1(i).PRC_CAT_CLASS_CD)
                                    || '|'
                                    || trim(l_data_list1(i).PRC_CAT_CLASS_DSC)
                                    || '|'
                                    || trim(l_data_list1(i).OFFR_CNT)
                                    || '|'
                                    || ''
                             );
        END LOOP; -- FOR i IN l_data_list1

        --job log status 
        XXVZN_JOB_STATUS_LOG_PKG.XX_PR_JOB_RUN_STATUS(p_cor_rel_id, v_jobid, $$plsql_Unit,
                                                 $$plsql_Unit,
                                                 $$plsql_Unit||' Query  File Generated',
                                                 $$plsql_line,
                                                 null,
                                                 SYS_CONTEXT('USERENV','SESSION_USER'));

        utl_file.fclose(fp);
         --job log status 
        XXVZN_JOB_STATUS_LOG_PKG.XX_PR_JOB_RUN_STATUS(p_cor_rel_id,v_jobid,
                                             $$plsql_Unit,
                                             $$plsql_Unit,
                                             $$plsql_Unit||' Query  Completed',
                                             $$plsql_line,
                                             null,
                                             SYS_CONTEXT('USERENV','SESSION_USER'));
        else
        XXVZN_JOB_STATUS_LOG_PKG.XX_PR_JOB_RUN_STATUS(p_cor_rel_id,v_jobid,
                                             $$plsql_Unit,
                                             $$plsql_Unit,
                                             $$plsql_Unit||' Query  No records found',
                                             $$plsql_line,
                                             null,
                                             SYS_CONTEXT('USERENV','SESSION_USER'));

        v_status := l_success_flag;
    END IF;      -- IF l_cnt >0                                 

   --query2 file creation
    IF l_cnt2 >0 THEN
        fp := utl_file.fopen(l_dir_path, l_file_name2, 'W');
        FOR i IN l_data_list2.first..l_data_list2.last LOOP

            UTL_FILE.PUT_LINE(fp, ''|| trim(l_data_list2(i).PRC_CAT_CLASS_CD)
                                    || '|'
                                    || trim(l_data_list2(i).PRC_CAT_CLASS_DSC)
                                    || '|'
                                    || trim(to_char(l_data_list2(i).OFFR_CNT))
                                    || '|'
                                    || ''                                    
                             );
        END LOOP; -- FOR i IN l_data_list1

        --job log status 
        XXVZN_JOB_STATUS_LOG_PKG.XX_PR_JOB_RUN_STATUS(p_cor_rel_id, v_jobid, $$plsql_Unit,
                                                 $$plsql_Unit,
                                                 $$plsql_Unit||' Query  File Generated',
                                                 $$plsql_line,
                                                 null,
                                                 SYS_CONTEXT('USERENV','SESSION_USER'));

        utl_file.fclose(fp);
         --job log status 
        XXVZN_JOB_STATUS_LOG_PKG.XX_PR_JOB_RUN_STATUS(p_cor_rel_id,v_jobid,
                                             $$plsql_Unit,
                                             $$plsql_Unit,
                                             $$plsql_Unit||' Query  Completed',
                                             $$plsql_line,
                                             null,
                                             SYS_CONTEXT('USERENV','SESSION_USER'));
        else
--            XXVZN_JOB_STATUS_LOG_PKG.XX_PR_JOB_RUN_STATUS(p_cor_rel_id,v_jobid,
--                                                 $$plsql_Unit,
--                                                 $$plsql_Unit,
--                                                 $$plsql_Unit||' Query  No records found',
--                                                 $$plsql_line,
--                                                 null,
--                                                 SYS_CONTEXT('USERENV','SESSION_USER'));

        fp := utl_file.fopen(l_dir_path, l_file_name2, 'W');
--        UTL_FILE.PUT_LINE(fp, ''|| trim(l_data_list2(i).PRC_CAT_CLASS_CD)
--                                    || '|'
--                                    || trim(l_data_list2(i).PRC_CAT_CLASS_DSC)
--                                    || '|'
--                                    || trim(to_char(l_data_list2(i).OFFR_CNT))
--                             );

        v_status := l_success_flag;
    END IF;      -- IF l_cnt2 >0       

    --job log status 
    XXVZN_JOB_STATUS_LOG_PKG.XX_PR_JOB_RUN_STATUS(p_cor_rel_id, v_jobid,
                                             null,
                                             $$plsql_Unit,
                                             $$plsql_Unit||' Job completed',
                                             $$plsql_line,
                                             null,
                                             SYS_CONTEXT('USERENV','SESSION_USER'));
   UPDATE BATCH_USER.PMS_JOB_STATUS 
      SET STATUS   = 'FINISHED',
          END_DATE = sysdate
    WHERE S_ID  = p_seq_no;
    COMMIT;

EXCEPTION
    WHEN no_data_found then
         utl_file.fclose(fp);
       raise_application_error(-20001, 'No records found');

    WHEN utl_file.invalid_path then
       raise_application_error(-20002, 'the file location or the filename is invalid');

    WHEN utl_file.invalid_operation THEN
       raise_application_error(-20003, 'The file could not be opened or operated'); 
    WHEN utl_file.write_error THEN
       raise_application_error(-20004, 'error occurred during the write operation');    
    WHEN OTHERS THEN
        v_status := l_failure_flag;
         my_code := SQLCODE;
         my_errm := SQLERRM;
         dbms_output.put_line('Error code ' || my_code || ': ' || my_errm ||'~~~'||DBMS_UTILITY.FORMAT_ERROR_BACKTRACE);

        --job log status 
    XXVZN_JOB_STATUS_LOG_PKG.XX_PR_JOB_RUN_STATUS(p_cor_rel_id, v_jobid,
                                             null,
                                             $$plsql_Unit,
                                             $$plsql_Unit||'Job Failed',
                                             $$plsql_line,
                                             null,
                                             SYS_CONTEXT('USERENV','SESSION_USER'));

      UPDATE BATCH_USER.PMS_JOB_STATUS 
      SET STATUS   = 'FAILED',
          END_DATE = L_DATE
    WHERE S_ID  = p_seq_no;                                        

END APMS191P_PROCESS;

--------------------------------------------------------------------------
This stored procedure is designed for data processing and file generation.  It seems to extract data from a database, 
perform some data manipulation, and then writes the results to text files.

Main Components
Parameters:

p_cor_rel_id: Correlation ID for job tracking.
v_jobid: Job ID for status logging.
v_status: Output status to indicate success or failure.
p_seq_no: Sequence number used in logging.
File Operations:

Directory and Filenames:
The procedure interacts with the CPI_EFS_ORA_OUTPUT_APMS191P directory.
Deletes files from the previous day (DD191AT_CLASSCD_TEMP, DD191AT_CLASSCD_DELTA_FINAL).
Writes new files (SPO_CATEGORY_CLASS_CODE_FEED, SPO_CATEGORY_CLASS_CODE_FEED_DELTA) based on current data.
Data Processing:

The procedure performs history processing, moving data between different tables.
It bulk collects data from two cursors (cat_class_cd_cap_list, cat_class_cd_cap_delta_list).
It writes this data to text files using the UTL_FILE package.
Exception Handling:

Various errors like no_data_found, utl_file.invalid_path, and utl_file.write_error are handled gracefully, and relevant logs are updated.
High-Level Code Flow
Step 1: Log job start.

Step 2: Fetch the creation date from the APMS191P_OUTPUT table.

Step 3: If today's date matches the fetched date:

Truncate the APMS191P_OUTPUT table.
Insert the latest data from PRC_CAT_CLASS_CD_CAP_V.
Step 4: If the date is from a previous day:

Archive old data in the APMS191P_OUTPUT_HIST table.
Clear out the APMS191P_OUTPUT_PREV and APMS191P_OUTPUT tables.
Load the previous day’s data into the APMS191P_OUTPUT_PREV.
Insert the latest data into APMS191P_OUTPUT.
Step 5: Delete previous files.

Step 6: Open cursors to fetch data and write it to files.

For cat_class_cd_cap_list: Write the data to SPO_CATEGORY_CLASS_CODE_FEED.
For cat_class_cd_cap_delta_list: Write the data to SPO_CATEGORY_CLASS_CODE_FEED_DELTA.
Step 7: Log completion or failure.

Line by line understanding
fp: A file handle for file operations (UTL_FILE package).
l_dir_path: Directory path where the output files will be stored.
l_curr_date and l_prev_date: Store the current and previous day’s dates in the format YYYYMMDD.
l_prev_file_name1 and l_prev_file_name2: The names of the files created during the previous day’s job run, which will be deleted before new files are generated.

l_file_name1 and l_file_name2: Filenames for the files to be generated during this run.

l_success_flag and l_failure_flag: Flags used to track job success or failure.
l_collect_limit1 and l_collect_limit2: Limits for bulk data collection (batch size).

cat_class_cd_cap_list: Cursor to fetch data from APMS191P_OUTPUT.
cat_class_cd_cap_delta_list: Cursor to fetch data from PRC_CAT_CLASS_CD_CAP_DELTA_V.

Declares a PL/SQL collection (array-like data structure) l_data_list1 to store rows fetched from cat_class_cd_cap_list.
Declares another collection l_data_list2 to store rows fetched from cat_class_cd_cap_delta_list.

----------------------------------------------------------------------------------------------------------------------
/*Insert Initial Job Status*/
INSERT INTO BATCH_USER.PMS_JOB_STATUS (correlation_id, s_id, task_name, status, start_date, end_date, created_by) 
VALUES (p_cor_rel_id, p_seq_no, 'APMS191P', 'CREATED', sysdate, null, 'BATCH');
COMMIT;
Inserts a new record into the PMS_JOB_STATUS table to log the initial job status.
Fields like status, start_date, and created_by are populated, and the transaction is committed.
----------------------------------------------------------------------------------------------------------------------

-------------------------------------------------------------------------------------------------------
/*Determine if Data Processing is Necessary*/
BEGIN
    SELECT trunc(CREATION_DATE) INTO l_db_date FROM BATCH_USER.APMS191P_OUTPUT WHERE ROWNUM <= 1;
EXCEPTION
    WHEN NO_DATA_FOUND THEN
        l_db_date := trunc(sysdate);
END;
This block tries to fetch the creation date of the first record in APMS191P_OUTPUT.
If no data is found (NO_DATA_FOUND), today's date is assigned to l_db_date.
----------------------------------------------------------------------------------------------

------------------------------------------------------------------------------------------------------
/*Data Processing Based on Date*/
IF l_db_date = trunc(sysdate) THEN
    EXECUTE IMMEDIATE 'TRUNCATE TABLE BATCH_USER.APMS191P_OUTPUT';
    INSERT INTO BATCH_USER.APMS191P_OUTPUT(PRC_CAT_CLASS_CD, PRC_CAT_CLASS_DSC, OFFR_CNT)
    SELECT PRC_CAT_CLASS_CD, PRC_CAT_CLASS_DSC, OFFR_CNT FROM PRC_CAT_CLASS_CD_CAP_V;
    COMMIT;
END IF;
If the data in APMS191P_OUTPUT is for today (l_db_date = trunc(sysdate)):
Truncate the table to remove old data.
Insert the latest records from PRC_CAT_CLASS_CD_CAP_V.
-------------------------------------------------------------------------------------------------------

-----------------------------------------------------------------------------------------------------------
/*Data Processing Based on Date*/
IF l_db_date < trunc(sysdate) THEN
    INSERT INTO BATCH_USER.APMS191P_OUTPUT_HIST(...);
    COMMIT;
    EXECUTE IMMEDIATE 'TRUNCATE TABLE BATCH_USER.APMS191P_OUTPUT_PREV';
    INSERT INTO BATCH_USER.APMS191P_OUTPUT_PREV(...);
    COMMIT;
    EXECUTE IMMEDIATE 'TRUNCATE TABLE BATCH_USER.APMS191P_OUTPUT';
    INSERT INTO BATCH_USER.APMS191P_OUTPUT(...);
    COMMIT;
END IF;
If the data is older than today (l_db_date < trunc(sysdate)):
Move old data to APMS191P_OUTPUT_HIST.
Load the current data into APMS191P_OUTPUT_PREV.
Truncate both OUTPUT_PREV and OUTPUT, and reload the latest data
--------------------------------------------------------------------------------------------------------

----------------------------------------------------------------------------------------------------
/*File deletion*/
SELECT dbms_lob.fileexists(bfilename(l_dir_path, l_prev_file_name1)) INTO l_exist FROM dual;
IF l_exist = 1 THEN
    utl_file.fremove(l_dir_path, l_prev_file_name1);
END IF;
Checks if the previous day's file (l_prev_file_name1) exists and deletes it using UTL_FILE.FREMOVE.
----------------------------------------------------------------------------------------------------

--------------------------------------------------------------------------------------------
/*Data fetching and writing to files*/
OPEN cat_class_cd_cap_list;
LOOP
    FETCH cat_class_cd_cap_list BULK COLLECT INTO l_data_list1;
    l_cnt := cat_class_cd_cap_list%rowcount;
    exit when cat_class_cd_cap_list%notfound;
END LOOP;
CLOSE cat_class_cd_cap_list;
Opens the cat_class_cd_cap_list cursor, fetches the data in bulk, and stores it in the collection l_data_list1.
----------------------------------------------------------------------------------------------------------------

-------------------------------------------------------------------------------------------------------------------
fp := utl_file.fopen(l_dir_path, l_file_name1, 'W');
FOR i IN l_data_list1.first..l_data_list1.last LOOP
    UTL_FILE.PUT_LINE(fp, ''|| trim(l_data_list1(i).PRC_CAT_CLASS_CD) || '|' || ... );
END LOOP;
utl_file.fclose(fp);
Opens a new file for writing (l_file_name1).
Iterates through the l_data_list1 collection and writes each row to the file.
Closes the file when done.
--------------------------------------------------------------------------------------------------------------------
