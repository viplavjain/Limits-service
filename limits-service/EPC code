package com.vzw.tools.authoring.service;

import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.vzw.tools.authoring.configuration.EpcConfiguration;
import com.vzw.tools.authoring.dto.DeviceEpcDto;
import com.vzw.tools.authoring.entity.*;
import com.vzw.tools.common.constant.AmdocsConstants;
import com.vzw.tools.common.constant.CommonConstants;
import com.vzw.tools.common.exception.ConverterException;
import com.vzw.tools.common.exception.XmlConversionException;
import com.vzw.tools.common.service.TokenService;
import com.vzw.tools.common.util.GenericWebClient;
import com.vzw.tools.common.util.JsonToObjectConverter;
import com.vzw.tools.common.util.JsonUtil;
import com.vzw.tools.source.configuration.RunTimeMapInitializer;
import lombok.extern.slf4j.Slf4j;
import org.apache.commons.collections4.CollectionUtils;
import org.apache.commons.lang3.StringUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.web.reactive.function.BodyInserters;
import reactor.core.publisher.Mono;

import java.io.InputStream;
import java.lang.reflect.Field;
import java.util.*;

@Slf4j
@Service
public class EPCService {
    private TokenService tokenService;
    private GenericWebClient genericWebClient;

    private RunTimeMapInitializer runTimeMapInitializer;
    private EpcConfiguration epcConfiguration;


    @Autowired
    EPCService(TokenService tokenService, RunTimeMapInitializer runTimeMapInitializer,
               GenericWebClient genericWebClient,EpcConfiguration epcConfiguration ) {
        this.tokenService = tokenService;
        this. runTimeMapInitializer=runTimeMapInitializer;
        this.genericWebClient = genericWebClient;
        this.epcConfiguration = epcConfiguration;
    }

    private HashMap<String, String> getEpcMappedJson(DeviceEpcDto deviceEpcDto) {
        HashMap<String, String> epcMapJson = new HashMap<>();
        try {
            HashMap<String, String> dtoEpcPropertyMap = JsonUtil.getPropertiesMap(deviceEpcDto);
            HashMap<String, String> epcMap = runTimeMapInitializer.getAuthorizationMap();
            for (Map.Entry<String, String> e : epcMap.entrySet()) {
                String value = dtoEpcPropertyMap.get(e.getValue());
                epcMapJson.put(e.getKey(), value);
            }
        } catch (Exception e) {
            throw new RuntimeException(e);
        }
        return epcMapJson;
    }

    public Map<String, String> getEpcMappedJson(String sorId, String sys) throws XmlConversionException, JsonProcessingException, ConverterException {
        return getEpcMappedJson(getEPCDeviceDetails(sorId, sys).block());
    }

    public Mono<DeviceEpcDto> getEPCDeviceDetails(String sorId, String env) throws JsonProcessingException, ConverterException {
        log.info("getEPCDeviceDetails API called");

        Mono<Token> tokenMono = tokenService.getToken(env);
        ProductOfferSearchRequest productOfferSearchRequest = createSearchRequest(sorId);

        return tokenMono.flatMap(token -> {
            String bearerToken = CommonConstants.BEARER + token.getToken();
            return fetchProductOffering(bearerToken, env, productOfferSearchRequest);
        });
    }

    /**
     * Creates the search request for fetching document details for product offer.
     */
    public ProductOfferSearchRequest createSearchRequest(String sorId) throws JsonProcessingException, ConverterException {
        ProductOfferSearchRequest request = JsonToObjectConverter.jsonToObject(AmdocsConstants.AMDOCS_DOCUMENT_SEARCH_JSON, ProductOfferSearchRequest.class);
        request.getItem().getOr().get(0).setText("\"" + sorId + "\"");
        request.getItem().getOr().get(1).getCriteria().getFilterCondition().getCondition().getValues().set(0,sorId);
        return request;
    }

    /**
     * Fetches Product Offering and continues processing.
     */
    public Mono<DeviceEpcDto> fetchProductOffering(String bearerToken, String env, ProductOfferSearchRequest amdocsSearchRequest) {
        return genericWebClient.callPostApi(bearerToken, epcConfiguration.getAmdocsSearchApi(env), amdocsSearchRequest, AmdocsSearchResponse.class)
                .flatMap(searchResponse -> {
                    String documentID = searchResponse.getDocuments().get(0).getDocumentMetaData().getDocumentID();
                    try {
                        return fetchProductSpecification(bearerToken, env, documentID);
                    } catch (ConverterException e) {
                        throw new RuntimeException(e);
                    }
                });
    }

    /**
     * Fetches Product Specification using the Product Offering ID.
     */
    public Mono<DeviceEpcDto> fetchProductSpecification(String bearerToken, String env, String documentID) throws ConverterException {
        ProductOfferingRequest productOfferingRequest = JsonToObjectConverter.jsonToObject(AmdocsConstants.AMDOCS_PRODUCT_OFFER_JSON, ProductOfferingRequest.class);
        productOfferingRequest.getIds().get(0).setId(documentID);

        return genericWebClient.callPostApi(bearerToken, epcConfiguration.getAmdocsProductApi(env), productOfferingRequest, ProductOfferingResponse.class)
                .flatMap(poResponse -> {
                    String productSpecificationId = poResponse.getDocuments().get(0).getDocument().getProductSpecification().getId();
                    Mono<ProductOfferingPriceResponse> monoProductOfferingPrice = fetchPriceRecords(poResponse,bearerToken,env);

                    try {
                        return fetchProductDetails(bearerToken, env, poResponse,monoProductOfferingPrice, productSpecificationId);
                    } catch (ConverterException e) {
                        throw new RuntimeException(e);
                    }
                });
    }

    public Mono<ProductOfferingPriceResponse> fetchPriceRecords(ProductOfferingResponse poResponse, String bearerToken,String env){
        try {
            List<ProductOfferingResponse.Document> documents = poResponse.getDocuments();
            String price = null;
            for (ProductOfferingResponse.Document document : documents) {
                if (document.getEntityType().equalsIgnoreCase(AmdocsConstants.PRODUCT_OFFERING)) {
                    ProductOfferingResponse.DocumentContent documentContent = document.getDocument();
                    List<ProductOfferingResponse.ProductOfferingPrice> prices = documentContent.getProductOfferingPrice();
                    if (prices != null) {
                        price = prices.get(0).getId();
                    }
                }
            }
            String productOfferingPriceUrl = epcConfiguration.getProductOfferingPrice(env);
            productOfferingPriceUrl = String.format(productOfferingPriceUrl, price);

            return genericWebClient.callPostApi(bearerToken, productOfferingPriceUrl, null, ProductOfferingPriceResponse.class);
        }
        catch(Exception e){
            return Mono.just(new ProductOfferingPriceResponse());
        }
    }

    /**
     * Fetches product details including Bundled Product Specification.
     */
    public Mono<DeviceEpcDto> fetchProductDetails(String bearerToken, String env, ProductOfferingResponse poResponse,Mono<ProductOfferingPriceResponse> monoProductOfferingPrice, String productSpecificationId) throws ConverterException {
        ProductOfferingRequest productSpecificationRequest = JsonToObjectConverter.jsonToObject(AmdocsConstants.AMDOCS_PRODUCT_SPECIFICATION_JSON, ProductOfferingRequest.class);
        productSpecificationRequest.getIds().get(0).setId(productSpecificationId);

        Mono<ProductOfferingResponse> monoProductSpecificationSkuResponse = genericWebClient.callPostApi(
                bearerToken, epcConfiguration.getAmdocsProductApi(env), productSpecificationRequest, ProductOfferingResponse.class
        );

        return monoProductSpecificationSkuResponse.flatMap(psskuResponse -> {
            if (psskuResponse.getDocuments().get(0).getDocument().getBundledProductSpecification() != null) {
                try {
                    return fetchBundledProductDetails(bearerToken, env, poResponse,monoProductOfferingPrice, psskuResponse);
                } catch (ConverterException e) {
                    throw new RuntimeException(e);
                }
            } else {
                try {
                    return fetchProductOfferingGroup(bearerToken, poResponse, env)
                            .flatMap(monoProductOfferingGroupResponse ->
                                    zipAndTransformResponse(poResponse,monoProductOfferingPrice, monoProductSpecificationSkuResponse, Mono.just(new ProductOfferingResponse()), Mono.just(monoProductOfferingGroupResponse))
                            );
                } catch (ConverterException e) {
                    throw new RuntimeException(e);
                }
            }
        });
    }

    /**
     * Fetches Bundled Product Specification and continues processing.
     */
    public Mono<DeviceEpcDto> fetchBundledProductDetails(String bearerToken, String env, ProductOfferingResponse poResponse, Mono<ProductOfferingPriceResponse> monoProductOfferingPrice, ProductOfferingResponse psskuResponse) throws ConverterException {
        String bundledProductId = psskuResponse.getDocuments().get(0).getDocument().getBundledProductSpecification().get(0).getId();

        ProductOfferingRequest productSpecificationPrdRequest = JsonToObjectConverter.jsonToObject(AmdocsConstants.AMDOCS_PRODUCT_SPECIFICATION_JSON, ProductOfferingRequest.class);
        productSpecificationPrdRequest.getIds().get(0).setId(bundledProductId);

        Mono<ProductOfferingResponse> monoProductSpecificationPrdResponse = genericWebClient.callPostApi(
                bearerToken, epcConfiguration.getAmdocsProductApi(env), productSpecificationPrdRequest, ProductOfferingResponse.class
        );

        return fetchProductOfferingGroup(bearerToken, poResponse, env)
                .flatMap(monoProductOfferingGroupResponse ->
                        zipAndTransformResponse(poResponse, monoProductOfferingPrice,Mono.just(psskuResponse), monoProductSpecificationPrdResponse, Mono.just(monoProductOfferingGroupResponse))
                );
    }

    /**
     * Fetches the Product Offering Group (POG) response.
     */
    public Mono<ProductOfferingResponse> fetchProductOfferingGroup(String bearerToken, ProductOfferingResponse poResponse, String env) throws ConverterException {
        ProductOfferingGroupSearchRequest productOfferingGroupSearchRequest = JsonToObjectConverter.jsonToObject(AmdocsConstants.AMDOCS_PRODUCT_OFFERGROUP_SEARCH_JSON, ProductOfferingGroupSearchRequest.class);
        ProductOfferingRequest productOfferingGroupRequest = JsonToObjectConverter.jsonToObject(AmdocsConstants.AMDOCS_PRODUCT_OFFERGROUP_JSON, ProductOfferingRequest.class);

        String poDocumentId = poResponse.getDocuments().get(0).getDocumentMetaData().getDocumentID();
        productOfferingGroupSearchRequest.getItem().getOr().get(0).getIds().get(0).setId(poDocumentId);
        productOfferingGroupSearchRequest.getItem().getOr().get(1).getIds().get(0).setId(poDocumentId);

        return genericWebClient.callPostApi(bearerToken, epcConfiguration.getAmdocsSearchApi(env), productOfferingGroupSearchRequest, AmdocsSearchResponse.class)
                .flatMap(searchResponse -> {
                    String pogDocumentId = retrieveDocumentId(searchResponse);
                    if (pogDocumentId.isEmpty()) {
                        return Mono.just(new ProductOfferingResponse());  // Return empty response if no POG found
                    }
                    productOfferingGroupRequest.getIds().get(0).setId(pogDocumentId);
                    return genericWebClient.callPostApi(bearerToken, epcConfiguration.getAmdocsProductApi(env), productOfferingGroupRequest, ProductOfferingResponse.class);
                });
    }

    /**
     * Extracts document ID for the Product Offering Group.
     */
    public String retrieveDocumentId(AmdocsSearchResponse amdocsSearchResponse) {
        return amdocsSearchResponse.getDocuments().stream()
                .filter(document -> document != null && AmdocsConstants.PRODUCT_OFFERING_GROUP.equalsIgnoreCase(document.getEntityType()))
                .map(document -> document.getDocumentMetaData().getDocumentID())
                .findFirst()
                .orElse(StringUtils.EMPTY);
    }

    /**
     * Zips and transforms the responses into `DeviceEpcDto`
     */
    public Mono<DeviceEpcDto> zipAndTransformResponse(
            ProductOfferingResponse poResponse,
            Mono<ProductOfferingPriceResponse> monoProductOfferingPrice,
            Mono<ProductOfferingResponse> monoProductSpecificationSkuResponse,
            Mono<ProductOfferingResponse> monoProductSpecificationPrdResponse,
            Mono<ProductOfferingResponse> monoProductOfferingGroupResponse
    ) {
        return Mono.zip(
                Mono.just(poResponse),
                monoProductOfferingPrice,
                monoProductSpecificationSkuResponse,
                monoProductSpecificationPrdResponse,
                monoProductOfferingGroupResponse
        ).map(tuple -> {
            HashMap<String, Object> responseMap = new HashMap<>();
            responseMap.put(AmdocsConstants.PRODUCT_OFFER, tuple.getT1());
            responseMap.put(AmdocsConstants.PRODUCT_OFFER_PRICE,tuple.getT2());
            responseMap.put(AmdocsConstants.PRODUCT_SPECIFICATION_SKU, tuple.getT3());
            responseMap.put(AmdocsConstants.PRODUCT_SPECIFICATION_PRD, tuple.getT4());
            responseMap.put(AmdocsConstants.PRODUCT_OFFER_GROUP, tuple.getT5());
            try {
                return returnDeviceEpcDTO(responseMap);
            } catch (IllegalAccessException e) {
                throw new RuntimeException(e);
            }
        });
    }


    public HashMap<String,String> returnEpcMap(ProductOfferingResponse.Document document){
        List<ProductOfferingResponse.Characteristic> c = document.getDocument().getCharacteristics();
        HashMap<String,String> map = new HashMap<String,String>();
        c.forEach(characteristic -> {
            String name = characteristic.getName();
            if(!AmdocsConstants.fieldsWithLocalizedValues.contains(name)) {
                List<ProductOfferingResponse.Value> values = characteristic.getValues();
                if (values != null && CollectionUtils.isNotEmpty(values)) {
                    String value = values.get(0).getValue();
                    map.put(name, value);
                } else {
                    map.put(name, null);
                }
            }
            else{
                populateMapForFieldsWithLocalizedvalues(characteristic,map);
            }
            map.put(AmdocsConstants.DISPLAYNAME,document.getDocumentMetaData().getDocumentName().get(0).getValue());
        });
        return map;
    }

    public void populateMapForFieldsWithLocalizedvalues(ProductOfferingResponse.Characteristic characteristic,HashMap<String,String> map){
        StringBuilder sb = new StringBuilder();
        int size =0;
        if(CollectionUtils.isNotEmpty(characteristic.getValues())) {
            for(ProductOfferingResponse.Value value : characteristic.getValues()){
                sb.append(value.getLocalizedValue().get(0).getValue());
                sb.append(",");
            }
            String finalString = sb.toString();
            map.put(characteristic.getName(), finalString.substring(0,finalString.length()-1));
        }
        else{
          map.put(characteristic.getName(),null);
        }
        }

    public HashMap<String,String> returnGenericKeyMap(HashMap<String,String> epcMap){
        try {
            // Load JSON file from the resources folder
            InputStream inputStream = EPCService.class.getClassLoader().getResourceAsStream(CommonConstants.DEVICE_CONFIG_JSON);
            if (inputStream == null) {
                throw new RuntimeException("File deviceConfig.json not found in resources folder");
            }

            // Parse JSON file using ObjectMapper
            ObjectMapper objectMapper = new ObjectMapper();
            JsonNode root = objectMapper.readTree(inputStream);


            // Map to hold genericKeyMap
            Map<String, String> genericKeyMap = new HashMap<>();

            // Extract devices
            JsonNode devices = root.at(CommonConstants.ITEMS_DEVICE);
            if (devices.isArray()) {
                for (JsonNode device : devices) {
                    String genericKey = device.get(CommonConstants.GENERIC_KEY).asText();
                    JsonNode authorization = device.at(CommonConstants.AUTHORIZATION_JSON_PATH);
                    if (authorization.isArray()) {
                        for (JsonNode auth : authorization) {
                            String key = auth.get(CommonConstants.KEY).asText();
                            if (!key.isEmpty()) {
                                genericKeyMap.put(key, genericKey);
                            }
                        }
                    }
                }
            }

            // Update epcMap with genericKeyMap
            for (Iterator<Map.Entry<String, String>> it = epcMap.entrySet().iterator(); it.hasNext(); ) {
                Map.Entry<String, String> entry = it.next();
                String key = entry.getKey();
                if (genericKeyMap.containsKey(key)) {
                    String newKey = genericKeyMap.get(key);
                    String value = entry.getValue();
                    it.remove(); // Remove old key
                    epcMap.put(newKey, value); // Add new key-value pair
                }
            }
            log.info("epcMap genericKeyMap updated: " + epcMap);
        } catch (Exception e) {
            log.error("Error while updating epcMap genericKeyMap: " + e.getMessage());
        }

        return epcMap;
    }


    public DeviceEpcDto returnDeviceEpcDTO(HashMap<String,Object> map) throws IllegalAccessException {
        List<Map<String,String>> list = new ArrayList<>();
        for (String key : map.keySet()) {
            if (map.get(key) instanceof ProductOfferingPriceResponse) {
                ProductOfferingPriceResponse productOfferingPriceResponse = (ProductOfferingPriceResponse) map.get(key);
                HashMap<String,String> popMap = retreivePopMap(productOfferingPriceResponse);
                list.add(popMap);

            } else {
                ProductOfferingResponse productOfferingResponse = (ProductOfferingResponse) map.get(key);
                if (productOfferingResponse != null && productOfferingResponse.getDocuments() != null) {
                    if (productOfferingResponse.getDocuments().get(0) != null) {
                        ProductOfferingResponse.Document productOfferingDocument = productOfferingResponse.getDocuments().get(0);

                        HashMap<String, String> epcMap = returnEpcMap(productOfferingDocument);
                        if (key.equalsIgnoreCase(AmdocsConstants.PRODUCT_SPECIFICATION_PRD))
                            addDocumenttoMap(epcMap, productOfferingResponse);
                        list.add(epcMap);
                    }
                } else {
                    log.info("ProductOfferingResponse is empty");
                }
            }
        }
        Map<String,String> concatenatedMap = concatenateMapsIntoOne(list);
        concatenatedMap = transformMap(concatenatedMap);
        DeviceEpcDto deviceDto= mapToDeviceEpcDTO(concatenatedMap);
        return deviceDto;
    }
    private Map<String,String> transformMap(Map<String,String> map){
       String carrierValue =  map.get(AmdocsConstants.CARRIER);
       if(carrierValue!=null && carrierValue.contains("|")){
           carrierValue = carrierValue.split("\\|")[0];
           carrierValue = carrierValue.trim();
           map.put(AmdocsConstants.CARRIER,carrierValue);
       }
       return map;
    }

    private HashMap<String,String> retreivePopMap(ProductOfferingPriceResponse productOfferingPriceResponse){
        List<ProductOfferingPriceResponse.PriceRecord> priceRecords = productOfferingPriceResponse.getPriceRecords();
        HashMap<String,String> hashMap = new HashMap<>();
        if(priceRecords!=null) {
            for (ProductOfferingPriceResponse.PriceRecord record : priceRecords) {
                String key = retreiveKey(record);
                String value = retreiveValue(record);
                hashMap.put(key, value);
            }
        }
         return hashMap;

    }
    private String retreiveKey(ProductOfferingPriceResponse.PriceRecord priceRecord){
        List<ProductOfferingPriceResponse. Parameter> parameters = priceRecord.getParameter();
        String commitmentName = null;
        String priceType = null;
        for (ProductOfferingPriceResponse. Parameter parameter : parameters){
            if(parameter.getName().equalsIgnoreCase(AmdocsConstants.COMMITMENT)){
                commitmentName = parameter.getValue().getName();
            }
            if(parameter.getName().equalsIgnoreCase(AmdocsConstants.VZ_PRICE_TYPE)){
                priceType = parameter.getValue().getName();
            }
        }
        if(priceType!=null && priceType.equalsIgnoreCase(AmdocsConstants.CP))
            return priceType + commitmentName;
        else
            return priceType;
    }
    private String retreiveValue(ProductOfferingPriceResponse.PriceRecord priceRecord){
        List<ProductOfferingPriceResponse.Price> prices = priceRecord.getPrice();
        String priceRecordValue= null;
        for(ProductOfferingPriceResponse.Price price : prices){
            priceRecordValue= price.getDutyFreeAmount().getValue();
            priceRecordValue = priceRecordValue.contains(CommonConstants.STRING_DOT) ? priceRecordValue.replaceFirst(AmdocsConstants.PRICE_CODE_REGEX,CommonConstants.EMPTY_STRING):priceRecordValue;
        }
        return priceRecordValue;
    }

    private void addDocumenttoMap(HashMap<String,String> epcMap,ProductOfferingResponse productOfferingResponse){

        epcMap.put(AmdocsConstants.DOCUMENTNAME,productOfferingResponse.getDocuments().get(0).getDocumentMetaData().getDocumentName().get(0).getValue());
    }

    public Map<String,String> concatenateMapsIntoOne(List<Map<String,String>> mapList){
        Map<String,String> result = new HashMap<>();
        for(Map<String,String> map : mapList){
            map.forEach((key,value) -> result.putIfAbsent(key,value));
        }
        return result;
    }

    public static DeviceEpcDto mapToDeviceEpcDTO(Map<String, String> map) throws IllegalAccessException {
        DeviceEpcDto deviceEpcDTO = new DeviceEpcDto();
        Class<?> clazz = deviceEpcDTO.getClass();

        for (Map.Entry<String, String> entry : map.entrySet()) {
            String key = entry.getKey();
            String value = entry.getValue();

            try {
                // Check if the field exists in the class
                Field field = clazz.getDeclaredField(key);

                // Make the field accessible
                field.setAccessible(true);

                // Set the value of the field
                field.set(deviceEpcDTO, value);
            } catch (NoSuchFieldException e) {
                // Ignore fields that do not exist in the class
            }
        }

        return deviceEpcDTO;
    }

}
