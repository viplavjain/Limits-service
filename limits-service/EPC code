public Mono<DeviceEpcDto> getEPCDeviceDetails(String sorId,String env) throws JsonProcessingException {
        log.info("getEPCDeviceDetails API called");
        Mono<Token> tokenMono = tokenService.getToken(env);
        AmdocsSearchRequest amdocsSearchRequest = JsonToObjectConverter.jsonToObject(AmdocsConstants.AMDOCS_DOCUMENT_SEARCH_JSON, AmdocsSearchRequest.class);
        amdocsSearchRequest.getItem().getOr().get(0).setText("\"" + sorId + "\"");
        ProductOfferingRequest productOfferingRequest = JsonToObjectConverter.jsonToObject(AmdocsConstants.AMDOCS_PRODUCT_OFFER_JSON, ProductOfferingRequest.class);
        ProductOfferingRequest productOfferingGroupRequest = JsonToObjectConverter.jsonToObject(AmdocsConstants.AMDOCS_PRODUCT_OFFERGROUP_JSON, ProductOfferingRequest.class);
        ProductOfferingRequest productSpecificationRequest = JsonToObjectConverter.jsonToObject(AmdocsConstants.AMDOCS_PRODUCT_SPECIFICATION_JSON , ProductOfferingRequest.class);
        AmdocsSearchResponse amdocsSearchResponse = new AmdocsSearchResponse();
        ProductOfferingResponse response = new ProductOfferingResponse();
        //Mono<ProductOfferingResponse> monoProductSpecificationPrdResponse=Mono.just(response);
        return tokenMono.flatMap(token -> {
            String bearerToken = CommonConstants.BEARER + token.getToken();

            // Calling the search api
            Mono<AmdocsSearchResponse> monoSearchResponse = genericWebClient.callPostApi(bearerToken, epcConfiguration.getAmdocsSearchApi(env),
                     amdocsSearchRequest, AmdocsSearchResponse.class);

            return monoSearchResponse.flatMap(searchResponse -> {
                String documentID = searchResponse.getDocuments().get(0).getDocumentMetaData().getDocumentID();
                productOfferingRequest.getIds().get(0).setId(documentID);
                Mono<ProductOfferingResponse> monoProductOfferingResponse = genericWebClient.callPostApi(bearerToken,
                        epcConfiguration.getAmdocsProductApi(env), productOfferingRequest, ProductOfferingResponse.class);

                return monoProductOfferingResponse.flatMap(poResponse -> {
                    String productSpecificationId = poResponse.getDocuments().get(0).getDocument().getProductSpecification().getId();
                    productSpecificationRequest.getIds().get(0).setId(productSpecificationId);
                    Mono<ProductOfferingResponse> monoProductSpecificationSkuResponse = genericWebClient.callPostApi(bearerToken,
                            epcConfiguration.getAmdocsProductApi(env), productSpecificationRequest, ProductOfferingResponse.class);

                    return monoProductSpecificationSkuResponse.flatMap(psskuResponse ->{
                        ProductOfferingResponse productOfferingResponse = new ProductOfferingResponse();
                        Mono<ProductOfferingResponse> monoProductSpecificationPrdResponse=Mono.just(productOfferingResponse);
                        if(psskuResponse.getDocuments().get(0).getDocument().getBundledProductSpecification()!=null) {
                            String id = psskuResponse.getDocuments().get(0).getDocument().getBundledProductSpecification().get(0).getId();

                            productSpecificationRequest.getIds().get(0).setId(id);
                            monoProductSpecificationPrdResponse = genericWebClient.callPostApi(bearerToken,
                                    epcConfiguration.getAmdocsProductApi(env), productSpecificationRequest, ProductOfferingResponse.class);
                        }
                        return Mono.zip(monoProductOfferingResponse, monoProductSpecificationSkuResponse,monoProductSpecificationPrdResponse).map(tuple ->
                        {
                            HashMap<String, Object> responseMap = new HashMap<>();
                            responseMap.put(AmdocsConstants.PRODUCT_OFFER, tuple.getT1());
                            responseMap.put(AmdocsConstants.PRODUCT_SPECIFICATION_SKU, tuple.getT2());
                            responseMap.put(AmdocsConstants.PRODUCT_SPECIFICATION_PRD, tuple.getT3());
                            try {
                                return returnDeviceEpcDTO(responseMap);
                            } catch (IllegalAccessException e) {
                                throw new RuntimeException(e);
                            }
                        });
                    });
                        });

            });
        });


    }

-------------------------My code----------------------------------------------------
public Mono<DeviceEpcDto> getEPCDeviceDetails(String sorId, String env) throws JsonProcessingException {
        log.info("getEPCDeviceDetails API called");

        Mono<Token> tokenMono = tokenService.getToken(env);
        AmdocsSearchRequest amdocsSearchRequest = JsonToObjectConverter.jsonToObject(AmdocsConstants.AMDOCS_DOCUMENT_SEARCH_JSON, AmdocsSearchRequest.class);
        amdocsSearchRequest.getItem().getOr().get(0).setText("\"" + sorId + "\"");

        ProductOfferingRequest productOfferingRequest = JsonToObjectConverter.jsonToObject(AmdocsConstants.AMDOCS_PRODUCT_OFFER_JSON, ProductOfferingRequest.class);
        ProductOfferingRequest productSpecificationRequest = JsonToObjectConverter.jsonToObject(AmdocsConstants.AMDOCS_PRODUCT_SPECIFICATION_JSON, ProductOfferingRequest.class);
        ProductOfferingRequest productOfferingGroupRequest = JsonToObjectConverter.jsonToObject(AmdocsConstants.AMDOCS_PRODUCT_OFFERGROUP_JSON, ProductOfferingRequest.class);
        ProductOfferingGroupSearchRequest productOfferingGroupSearchRequest = JsonToObjectConverter.jsonToObject(AmdocsConstants.AMDOCS_PRODUCT_OFFERGROUP_SEARCH_JSON, ProductOfferingGroupSearchRequest.class);
        return tokenMono.flatMap(token -> {
            String bearerToken = CommonConstants.BEARER + token.getToken();

            // Call the search API
            Mono<AmdocsSearchResponse> monoSearchResponse = genericWebClient.callPostApi(bearerToken,
                    epcConfiguration.getAmdocsSearchApi(env), amdocsSearchRequest, AmdocsSearchResponse.class);

            return monoSearchResponse.flatMap(searchResponse -> {
                String documentID = searchResponse.getDocuments().get(0).getDocumentMetaData().getDocumentID();
                productOfferingRequest.getIds().get(0).setId(documentID);

                // Call the product offering API
                Mono<ProductOfferingResponse> monoProductOfferingResponse = genericWebClient.callPostApi(bearerToken,
                        epcConfiguration.getAmdocsProductApi(env), productOfferingRequest, ProductOfferingResponse.class);

                return monoProductOfferingResponse.flatMap(poResponse -> {
                    String productSpecificationId = poResponse.getDocuments().get(0).getDocument().getProductSpecification().getId();
                    productSpecificationRequest.getIds().get(0).setId(productSpecificationId);

                    // Call the product specification API
                    Mono<ProductOfferingResponse> monoProductSpecificationSkuResponse = genericWebClient.callPostApi(bearerToken,
                            epcConfiguration.getAmdocsProductApi(env), productSpecificationRequest, ProductOfferingResponse.class);

                    return monoProductSpecificationSkuResponse.flatMap(psskuResponse -> {
                        if (psskuResponse.getDocuments().get(0).getDocument().getBundledProductSpecification() != null) {
                            String bundledProductId = psskuResponse.getDocuments().get(0).getDocument().getBundledProductSpecification().get(0).getId();
                            ProductOfferingRequest productSpecificationPrdRequest = JsonToObjectConverter.jsonToObject(AmdocsConstants.AMDOCS_PRODUCT_SPECIFICATION_JSON, ProductOfferingRequest.class);
                            productSpecificationPrdRequest.getIds().get(0).setId(bundledProductId);

                            // Call API for bundled product specification
                            Mono<ProductOfferingResponse> monoProductSpecificationPrdResponse = genericWebClient.callPostApi(bearerToken,
                                    epcConfiguration.getAmdocsProductApi(env), productSpecificationPrdRequest, ProductOfferingResponse.class);
                           // For POG
                            String po_documentId = poResponse.getDocuments().get(0).getDocumentMetaData().getDocumentID();
                            productOfferingGroupSearchRequest.getItem().getOr().get(0).getIds().get(0).setId(po_documentId);
                            productOfferingGroupSearchRequest.getItem().getOr().get(1).getIds().get(0).setId(po_documentId);
                            Mono<AmdocsSearchResponse> monoProductOfferingGroupSearchResponse = genericWebClient.callPostApi(bearerToken,
                                    epcConfiguration.getAmdocsSearchApi(env), productOfferingGroupSearchRequest, AmdocsSearchResponse.class);
                            monoProductOfferingGroupSearchResponse.flatMap(productOfferingGroupSearchResponse ->{
                                String pog_documentId = retreiveDocumentId(productOfferingGroupSearchResponse);
                                productOfferingGroupRequest.getIds().get(0).setId(pog_documentId);
                                Mono<ProductOfferingResponse> monoProductOfferingGroupResponse = genericWebClient.callPostApi(bearerToken,
                                        epcConfiguration.getAmdocsProductApi(env), productOfferingGroupRequest, ProductOfferingResponse.class);
                                return zipAndTransformResponse(monoProductOfferingResponse, monoProductSpecificationSkuResponse, monoProductSpecificationPrdResponse,monoProductOfferingGroupResponse);
                            });
                            //return zipAndTransformResponse(monoProductOfferingResponse, monoProductSpecificationSkuResponse, monoProductSpecificationPrdResponse,monoProductOfferingGroupResponse);
                        } else {
                            // If no bundled product, pass an empty response
                            String po_documentId = poResponse.getDocuments().get(0).getDocumentMetaData().getDocumentID();
                            productOfferingGroupSearchRequest.getItem().getOr().get(0).getIds().get(0).setId(po_documentId);
                            productOfferingGroupSearchRequest.getItem().getOr().get(1).getIds().get(0).setId(po_documentId);
                            Mono<AmdocsSearchResponse> monoProductOfferingGroupSearchResponse = genericWebClient.callPostApi(bearerToken,
                                    epcConfiguration.getAmdocsSearchApi(env), productOfferingGroupSearchRequest, AmdocsSearchResponse.class);
                            monoProductOfferingGroupSearchResponse.flatMap(productOfferingGroupSearchResponse ->{
                                String pog_documentId = retreiveDocumentId(productOfferingGroupSearchResponse);
                                productOfferingGroupRequest.getIds().get(0).setId(pog_documentId);
                                Mono<ProductOfferingResponse> monoProductOfferingGroupResponse = genericWebClient.callPostApi(bearerToken,
                                        epcConfiguration.getAmdocsProductApi(env), productOfferingGroupRequest, ProductOfferingResponse.class);
                            return zipAndTransformResponse(monoProductOfferingResponse, monoProductSpecificationSkuResponse, Mono.just(new ProductOfferingResponse()),monoProductOfferingGroupResponse);
                            });
                            }
                        return null;
                    });
                });
            });
        });
    }

    private String retreiveDocumentId(AmdocsSearchResponse amdocsSearchResponse){
       List<AmdocsSearchResponse.Document> documents = amdocsSearchResponse.getDocuments();
       for (AmdocsSearchResponse.Document document : documents){
           if(document!=null && document.getEntityType().equalsIgnoreCase("productOfferingGroup")){
               return document.getDocumentMetaData().getDocumentID();
           }
       }
       return StringUtils.EMPTY;
    }

    private Mono<DeviceEpcDto> zipAndTransformResponse(
            Mono<ProductOfferingResponse> monoProductOfferingResponse,
            Mono<ProductOfferingResponse> monoProductSpecificationSkuResponse,
            Mono<ProductOfferingResponse> monoProductSpecificationPrdResponse,
            Mono<ProductOfferingResponse> monoProductOfferingGroupResponse) {

        return Mono.zip(monoProductOfferingResponse, monoProductSpecificationSkuResponse, monoProductSpecificationPrdResponse,monoProductOfferingGroupResponse)
                .map(tuple -> {
                    HashMap<String, Object> responseMap = new HashMap<>();
                    responseMap.put(AmdocsConstants.PRODUCT_OFFER, tuple.getT1());
                    responseMap.put(AmdocsConstants.PRODUCT_SPECIFICATION_SKU, tuple.getT2());
                    responseMap.put(AmdocsConstants.PRODUCT_SPECIFICATION_PRD, tuple.getT3());
                    responseMap.put(AmdocsConstants.PRODUCT_OFFER_GROUP, tuple.getT4());
                    try {
                        return returnDeviceEpcDTO(responseMap);
                    } catch (IllegalAccessException e) {
                        throw new RuntimeException(e);
                    }
                });
    }

--------------------Updated code from chatgpt------------------------------------------------
public Mono<DeviceEpcDto> getEPCDeviceDetails(String sorId, String env) throws JsonProcessingException {
        log.info("getEPCDeviceDetails API called");

        Mono<Token> tokenMono = tokenService.getToken(env);
        AmdocsSearchRequest amdocsSearchRequest = JsonToObjectConverter.jsonToObject(AmdocsConstants.AMDOCS_DOCUMENT_SEARCH_JSON, AmdocsSearchRequest.class);
        amdocsSearchRequest.getItem().getOr().get(0).setText("\"" + sorId + "\"");

        ProductOfferingRequest productOfferingRequest = JsonToObjectConverter.jsonToObject(AmdocsConstants.AMDOCS_PRODUCT_OFFER_JSON, ProductOfferingRequest.class);
        ProductOfferingRequest productSpecificationRequest = JsonToObjectConverter.jsonToObject(AmdocsConstants.AMDOCS_PRODUCT_SPECIFICATION_JSON, ProductOfferingRequest.class);
        ProductOfferingRequest productOfferingGroupRequest = JsonToObjectConverter.jsonToObject(AmdocsConstants.AMDOCS_PRODUCT_OFFERGROUP_JSON, ProductOfferingRequest.class);
        ProductOfferingGroupSearchRequest productOfferingGroupSearchRequest = JsonToObjectConverter.jsonToObject(AmdocsConstants.AMDOCS_PRODUCT_OFFERGROUP_SEARCH_JSON, ProductOfferingGroupSearchRequest.class);

        return tokenMono.flatMap(token -> {
            String bearerToken = CommonConstants.BEARER + token.getToken();

            return genericWebClient.callPostApi(bearerToken, epcConfiguration.getAmdocsSearchApi(env), amdocsSearchRequest, AmdocsSearchResponse.class)
                    .flatMap(searchResponse -> {
                        String documentID = searchResponse.getDocuments().get(0).getDocumentMetaData().getDocumentID();
                        productOfferingRequest.getIds().get(0).setId(documentID);

                        return genericWebClient.callPostApi(bearerToken, epcConfiguration.getAmdocsProductApi(env), productOfferingRequest, ProductOfferingResponse.class);
                    })
                    .flatMap(poResponse -> {
                        String productSpecificationId = poResponse.getDocuments().get(0).getDocument().getProductSpecification().getId();
                        productSpecificationRequest.getIds().get(0).setId(productSpecificationId);

                        Mono<ProductOfferingResponse> monoProductSpecificationSkuResponse = genericWebClient.callPostApi(
                                bearerToken, epcConfiguration.getAmdocsProductApi(env), productSpecificationRequest, ProductOfferingResponse.class
                        );

                        return monoProductSpecificationSkuResponse.flatMap(psskuResponse -> {
                            if (psskuResponse.getDocuments().get(0).getDocument().getBundledProductSpecification() != null) {
                                String bundledProductId = psskuResponse.getDocuments().get(0).getDocument().getBundledProductSpecification().get(0).getId();
                                ProductOfferingRequest productSpecificationPrdRequest = JsonToObjectConverter.jsonToObject(AmdocsConstants.AMDOCS_PRODUCT_SPECIFICATION_JSON, ProductOfferingRequest.class);
                                productSpecificationPrdRequest.getIds().get(0).setId(bundledProductId);

                                Mono<ProductOfferingResponse> monoProductSpecificationPrdResponse = genericWebClient.callPostApi(
                                        bearerToken, epcConfiguration.getAmdocsProductApi(env), productSpecificationPrdRequest, ProductOfferingResponse.class
                                );

                                return fetchProductOfferingGroup(bearerToken, poResponse, productOfferingGroupSearchRequest, productOfferingGroupRequest,env)
                                        .flatMap(monoProductOfferingGroupResponse ->
                                                zipAndTransformResponse(poResponse, monoProductSpecificationSkuResponse, monoProductSpecificationPrdResponse, Mono.just(monoProductOfferingGroupResponse))
                                        );
                            } else {
                                return fetchProductOfferingGroup(bearerToken, poResponse, productOfferingGroupSearchRequest, productOfferingGroupRequest,env)
                                        .flatMap(monoProductOfferingGroupResponse ->
                                                zipAndTransformResponse(poResponse, monoProductSpecificationSkuResponse, Mono.just(new ProductOfferingResponse()), Mono.just(monoProductOfferingGroupResponse))
                                        );
                            }
                        });
                    });
        });
    }

    /**
     * Fetches the Product Offering Group (POG) response
     */
    private Mono<ProductOfferingResponse> fetchProductOfferingGroup(
            String bearerToken,
            ProductOfferingResponse poResponse,
            ProductOfferingGroupSearchRequest productOfferingGroupSearchRequest,
            ProductOfferingRequest productOfferingGroupRequest,String env
    ) {
        String poDocumentId = poResponse.getDocuments().get(0).getDocumentMetaData().getDocumentID();
        productOfferingGroupSearchRequest.getItem().getOr().get(0).getIds().get(0).setId(poDocumentId);
        productOfferingGroupSearchRequest.getItem().getOr().get(1).getIds().get(0).setId(poDocumentId);

        return genericWebClient.callPostApi(bearerToken, epcConfiguration.getAmdocsSearchApi(env), productOfferingGroupSearchRequest, AmdocsSearchResponse.class)
                .flatMap(searchResponse -> {
                    String pogDocumentId = retrieveDocumentId(searchResponse);
                    if (pogDocumentId.isEmpty()) {
                        return Mono.just(new ProductOfferingResponse());  // Return empty response if no POG found
                    }

                    productOfferingGroupRequest.getIds().get(0).setId(pogDocumentId);
                    return genericWebClient.callPostApi(bearerToken, epcConfiguration.getAmdocsProductApi(env), productOfferingGroupRequest, ProductOfferingResponse.class);
                });
    }

    /**
     * Extracts document ID for the Product Offering Group.
     */
    private String retrieveDocumentId(AmdocsSearchResponse amdocsSearchResponse) {
        return amdocsSearchResponse.getDocuments().stream()
                .filter(document -> document != null && "productOfferingGroup".equalsIgnoreCase(document.getEntityType()))
                .map(document -> document.getDocumentMetaData().getDocumentID())
                .findFirst()
                .orElse(StringUtils.EMPTY);
    }

    /**
     * Zips and transforms the responses into `DeviceEpcDto`
     */
    private Mono<DeviceEpcDto> zipAndTransformResponse(
            ProductOfferingResponse poResponse,
            Mono<ProductOfferingResponse> monoProductSpecificationSkuResponse,
            Mono<ProductOfferingResponse> monoProductSpecificationPrdResponse,
            Mono<ProductOfferingResponse> monoProductOfferingGroupResponse
    ) {
        return Mono.zip(
                Mono.just(poResponse),
                monoProductSpecificationSkuResponse,
                monoProductSpecificationPrdResponse,
                monoProductOfferingGroupResponse
        ).map(tuple -> {
            HashMap<String, Object> responseMap = new HashMap<>();
            responseMap.put(AmdocsConstants.PRODUCT_OFFER, tuple.getT1());
            responseMap.put(AmdocsConstants.PRODUCT_SPECIFICATION_SKU, tuple.getT2());
            responseMap.put(AmdocsConstants.PRODUCT_SPECIFICATION_PRD, tuple.getT3());
            responseMap.put(AmdocsConstants.PRODUCT_OFFER_GROUP, tuple.getT4());
            try {
                return returnDeviceEpcDTO(responseMap);
            } catch (IllegalAccessException e) {
                throw new RuntimeException(e);
            }
        });
    }

